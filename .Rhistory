wt <- lapply(hab, FUN=function(x)x$Wt)
out <- lapply(wt, FUN=function(x)LBNbiom.method(x, binBreaks=bks))
nbss <- ldply(lapply(out, FUN=function(x)x$binVals), data.frame)
info <- ldply(strsplit(nbss$.id, split="[|]"))
names(info) <- "Habitat"
nbss_mei <- cbind(info, nbss[, -1])
out <- lapply(wt, FUN=MLE.method)
# size specutrum slope estimate by MLE
lapply(out, FUN=function(x)x[1:2])
plb <- ldply(lapply(out, FUN=function(x)x$PLB))
info <- ldply(strsplit(plb$.id, split="[|]"))
names(info) <- "Habitat"
plb_mei <- cbind(info, plb[, -1])
# Rank individual weight
SortWt <- lapply(hab, FUN=function(x)cbind(rank=1:length(x$Wt), weight=sort(x$Wt, decreasing=TRUE)))
SortWt <- ldply(SortWt)
info <- ldply(strsplit(SortWt$.id, split="[|]"))
names(info) <- "Habitat"
SortWt_mei <- cbind(info, SortWt[, -1])
nbss <- rbind(cbind(Class="Macrofauna", nbss_mac),
cbind(Class="Meiofauna", nbss_mei))
plb <- rbind(cbind(Class="Macrofauna", plb_mac),
cbind(Class="Meiofauna", plb_mei))
SortWt <- rbind(cbind(Class="Macrofauna", SortWt_mac),
cbind(Class="Meiofauna", SortWt_mei))
ggplot(data=nbss, aes(x=log10binMid, y=log10totalBiomNorm, colour=Class, shape=Habitat))+
geom_point(size=3)+
scale_colour_manual(values=c("#e41a1c", "#4daf4a"))+
scale_shape_manual(values=c(19, 1))+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB)))+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB.LC)), linetype=2)+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB.UC)), linetype=2)+
labs(x=expression(Log[10]~"mid-point of"~size~class~(mg)), y=expression(Log[10]~normalized~biomass))+
theme_bw() %+replace% large #%+replace% dark
ggplot(data=SortWt, aes(x=weight, y=rank, colour=Class, shape=Habitat))+
geom_point(size=2)+
scale_colour_manual(values=c("#e41a1c", "#4daf4a"))+
scale_shape_manual(values=c(19, 1))+
geom_path(data=plb, aes(x=x.PLB, y=y.PLB))+
geom_path(data=plb, aes(x=x.PLB, y=y.PLB.LC), linetype=2)+
geom_path(data=plb, aes(x=x.PLB, y=y.PLB.UC), linetype=2)+
scale_x_log10(expression(Individual~weight~(mg)), labels = function(x) format(x, scientific = T))+
scale_y_log10("Individual rank", limits=c(1, NA), labels = function(x) format(x, scientific = T))+
theme_bw() %+replace% large #%+replace% dark
library(bbbs)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(ggplot2)
library(plyr)
library(doBy)
library(readxl)
large <- theme(legend.title = element_text(size=20),
legend.text = element_text(size=20),
strip.text=element_text(size=20),
axis.title = element_text(size=20),
axis.text.y = element_text(size=20),
axis.text.x = element_text(size=20, angle=60, hjust=0.5))
rotate <- theme(axis.text.x = element_text(size=20, angle=60, hjust=0.5))
# dark theme for ggplot
dark <- theme(plot.background = element_rect(colour = 'NA', fill = 'gray10'),
panel.background = element_rect(colour = 'NA', fill = 'transparent'),
legend.background = element_rect(colour = 'NA', fill = 'transparent'),
legend.title = element_text(colour = 'white', size=20),
legend.text = element_text(colour = 'white', size=20),
axis.title = element_text(colour = 'white', size=20),
axis.text = element_text(colour = 'white', size=20),
axis.ticks = element_line(colour = 'white'),
panel.border = element_rect(fill = 'NA', colour = 'white'),
panel.grid.major = element_line(colour = 'gray30'),
panel.grid.minor = element_line(colour = 'gray20'))
col_types <- c("text", "text", "text", "numeric", "numeric", "text", "text", "text", "text", "text", "text",
"numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "text")
mac <- NULL
for(i in 1:15){
d <- read_excel("../excel/GPSC_macro_size_2020.01.08.xlsx", sheet=i, col_types=col_types)
mac <- rbind(mac, d)
}
mac <- as.data.frame(mac)
depth <- read_excel("../excel/GPSC_macro_sorting_2019.12.16.xlsx", sheet=1)
mac <- cbind(depth[match(paste(mac$Cruise, mac$Station), paste(depth$Cruise, depth$Station)),], mac)
mac$Wt <- mac$Size*(1.13)
depth.bk <- c(200, 400, 600, 800, 1100, 2000, 3700)
depth.lab <- c("200-400", "400-600", "600-800", "800-1100", "1100-2000", "2000-3700")
mac$Depth.zone <- cut(mac$Depth, breaks=depth.bk, labels=depth.lab)
# Split the size data by polychaetes, nematods, harpacticoids, peracarids and others
Category <- as.character(mac$Taxon)
Category[Category=="Amphipoda"|Category=="Cumacea"|Category=="Isopoda"|Category=="Tanaidacea"] <- "Peracarida"
Category[Category=="Oligochaeta"|Category=="Nemertea"|Category=="Sipuncula"|Category=="Aplacophora"|Category=="Ostracoda"] <- "Others"
mac <- cbind(Category, mac)
mac <- subset(mac, Cruise=="OR1_1096"|Cruise=="OR1_1102"|Cruise=="OR1_1114"|Cruise=="OR1_1126")
# Size (complete specimen)
mac_s <- subset(mac, Condition=="C")
# Observed macrofauna sizes
ggplot(data=mac_s,
aes(x=log10(Wt), fill=Habitat, colour=Habitat))+
geom_density(alpha=0.5)+
facet_wrap(~Cruise, scales="free_y")+
labs(y="Frequency", x=expression(Log[10]~body~size~(mg)))+
theme_bw() %+replace% large #%+replace% dark
# Observed macrofauna sizes
ggplot(data=mac_s,
aes(x=log10(Wt), fill=Habitat, colour=Habitat))+
geom_density(alpha=0.5)+
scale_colour_manual(values=c("#e41a1c", "#4daf4a"))+
facet_wrap(~Cruise, scales="free_y")+
labs(y="Frequency", x=expression(Log[10]~body~size~(mg)))+
theme_bw() %+replace% large #%+replace% dark
# Observed macrofauna sizes
ggplot(data=mac_s,
aes(x=log10(Wt), fill=Habitat, colour=Habitat))+
geom_density(alpha=0.5)+
scale_colour_manual(values=c("#e41a1c", "#4daf4a"))+
scale_fill_manual(values=c("#e41a1c", "#4daf4a"))+
facet_wrap(~Cruise, scales="free_y")+
labs(y="Frequency", x=expression(Log[10]~body~size~(mg)))+
theme_bw() %+replace% large #%+replace% dark
# Observed macrofauna sizes
ggplot(data=mac_s,
aes(x=log10(Wt), fill=Habitat, colour=Habitat))+
geom_density(alpha=0.5)+
scale_colour_manual(values=c("#e41a1c", "#377eb8"))+
scale_fill_manual(values=c("#e41a1c", "#377eb8"))+
facet_wrap(~Cruise, scales="free_y")+
labs(y="Frequency", x=expression(Log[10]~body~size~(mg)))+
theme_bw() %+replace% large #%+replace% dark
# Observed macrofauna sizes
ggplot(data=mac_s,
aes(x=log10(Wt), fill=Habitat, colour=Habitat))+
geom_density(alpha=0.5)+
facet_wrap(~Cruise, scales="free_y")+
labs(y="Frequency", x=expression(Log[10]~body~size~(mg)))+
theme_bw() %+replace% large #%+replace% dark
# Observed polychaete sizes
ggplot(data=subset(mac_s, Category=="Polychaeta"),
aes(x=log10(Wt), fill=Habitat, colour=Habitat))+
geom_density(alpha=0.5)+
facet_wrap(~Cruise, scales="free")+
labs(y="Frequency", x=expression(Log[10]~body~size~(mg)))+
theme_bw() %+replace% large #%+replace% dark
# Hapacticoid and others
col_types <- c("text", "text", "text", "numeric", "numeric", "numeric", "text","text", "text", "text", "text", "text", "text", "numeric", "numeric", "numeric", "numeric", "text")
mei <- NULL
for(i in 1:3){
d <- as.data.frame(read_excel("../excel/GPSC_meio_size_2020.01.07.xlsx", sheet=i, col_types=col_types))
mei <- rbind(mei, d)
}
# Get water depth
mei <- cbind(depth[match(paste(mei$Cruise, mei$Station), paste(depth$Cruise, depth$Station)),], mei)
mei$Wt <- mei$Size*(1.13)
depth.bk <- c(200, 400, 600, 800, 1100)
depth.lab <- c("200-400", "400-600", "600-800", "800-1100")
mei$Depth.zone <- cut(mei$Depth, breaks=depth.bk, labels=depth.lab)
# Split the size data by nematods, harpacticoids and others
Category <- as.character(mei$Taxon)
Category[Category!="Nematoda"&Category!="Harpacticoida"] <- "Others"
mei <- splitBy(~Category+Cruise+Station, cbind(Category, mei))
mei <- ldply(mei, .id=NULL)
ggplot(data=subset(mei, Cruise=="OR1_1114"|Cruise=="OR1_1126"),
aes(x=log(Wt), fill=Habitat, colour=Habitat))+
geom_density(alpha=0.5)+
facet_grid(Cruise~Category)+
labs(y="Frequency", x=expression(Log~body~size~(mg~individual^-1)))+
theme_bw()%+replace% large #%+replace% dark
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
library(bbbs)
library(ggplot2)
library(plyr)
library(doBy)
library(readxl)
#library(devtools)
#install_github("andrew-edwards/sizeSpectra")
library(sizeSpectra)
library(devtools)
install_github("andrew-edwards/sizeSpectra")
library(bbbs)
library(ggplot2)
library(plyr)
library(doBy)
library(readxl)
#library(devtools)
#install_github("andrew-edwards/sizeSpectra")
library(sizeSpectra)
large <- theme(legend.title = element_text(size=20),
legend.text = element_text(size=20),
axis.title = element_text(size=20),
axis.text = element_text(size=20))
rotate <- theme(axis.text.x = element_text(size=20, angle=60, hjust=0.5))
# dark theme for ggplot
dark <- theme(plot.background = element_rect(colour = 'NA', fill = 'gray10'),
panel.background = element_rect(colour = 'NA', fill = 'transparent'),
legend.background = element_rect(colour = 'NA', fill = 'transparent'),
legend.title = element_text(colour = 'white', size=20),
legend.text = element_text(colour = 'white', size=20),
axis.title = element_text(colour = 'white', size=20),
axis.text = element_text(colour = 'white', size=20),
axis.ticks = element_line(colour = 'white'),
panel.border = element_rect(fill = 'NA', colour = 'white'),
panel.grid.major = element_line(colour = 'gray30'),
panel.grid.minor = element_line(colour = 'gray20'))
# log2 bin
l2b <- function(x) 2^( floor(log2(min(x))) : ceiling(log2(max(x))) )
# Use functions from Edwards etal. (2017) Methods in Ecology and Evolution 1:57-67
# https://github.com/andrew-edwards/fitting-size-spectra
#source("PLBfunctions.r")
hab <- splitBy(~Habitat, data=mac)
wt <- lapply(hab, FUN=function(x)x$Wt)
bks <- l2b(unlist(wt))
out <- lapply(wt, FUN=function(x)LBNbiom.method(x, binBreaks=bks))
nbss <- ldply(lapply(out, FUN=function(x)x$binVals), data.frame)
info <- ldply(strsplit(nbss$.id, split="[|]"))
names(info) <- c("Habitat")
nbss <- cbind(info, nbss[, -1])
ggplot(data=nbss,aes(x=log10binMid, y=log10totalBiomNorm, colour=Habitat))+
geom_point(size=5)+
geom_path(size=1)+
scale_colour_manual(values=c("black","gray"))+
labs(x=expression(Log[10]~"mid-point of"~size~class~(mg)), y=expression(Log[10]~normalized~biomass))+
theme_bw() %+replace% large #%+replace% dark
# Only keep Wt > 7.812500e-03
hab <- splitBy(~Habitat, data=subset(mac, Wt>7.812500e-03))
wt <- lapply(hab, FUN=function(x)x$Wt)
out <- lapply(wt, FUN=function(x)LBNbiom.method(x, binBreaks=bks))
nbss <- ldply(lapply(out, FUN=function(x)x$binVals), data.frame)
info <- ldply(strsplit(nbss$.id, split="[|]"))
names(info) <- c("Habitat")
nbss <- cbind(info, nbss[, -1])
out <- lapply(wt, FUN=MLE.method)
# size specutrum slope estimate by MLE
lapply(out, FUN=function(x)x[1:2])
plb <- ldply(lapply(out, FUN=function(x)x$PLB))
info <- ldply(strsplit(plb$.id, split="[|]"))
names(info) <- c("Habitat")
plb <- cbind(info, plb[, -1])
ggplot(data=nbss,aes(x=log10binMid, y=log10totalBiomNorm, colour=Habitat))+
geom_point(size=5)+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB)))+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB.LC)), linetype=2)+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB.UC)), linetype=2)+
scale_colour_manual(values=c("black","gray"))+
labs(x=expression(Log[10]~"mid-point of"~size~class~(mg)), y=expression(Log[10]~normalized~biomass))+
theme_bw() %+replace% large #%+replace% dark
hab <- splitBy(~Habitat, data=mac)
wt <- lapply(hab, FUN=function(x)x$Wt)
bks <- l2b(unlist(wt))
out <- lapply(wt, FUN=function(x)LBNbiom.method(x, binBreaks=bks))
nbss <- ldply(lapply(out, FUN=function(x)x$binVals), data.frame)
info <- ldply(strsplit(nbss$.id, split="[|]"))
names(info) <- c("Habitat")
nbss <- cbind(info, nbss[, -1])
ggplot(data=nbss,aes(x=log10binMid, y=log10totalBiomNorm, colour=Habitat))+
geom_point(size=5)+
geom_path(size=1)+
scale_colour_manual(values=c("black","gray"))+
labs(x=expression(Log[10]~"mid-point of"~size~class~(mg)), y=expression(Log[10]~normalized~biomass))+
theme_bw() %+replace% large #%+replace% dark
wt
bks
hab <- splitBy(~Habitat, data=subset(mac, Cruise!="OR1_1102"))
wt <- lapply(hab, FUN=function(x)x$Wt)
bks <- l2b(unlist(wt))
out <- lapply(wt, FUN=function(x)LBNbiom.method(x, binBreaks=bks))
nbss <- ldply(lapply(out, FUN=function(x)x$binVals), data.frame)
info <- ldply(strsplit(nbss$.id, split="[|]"))
names(info) <- c("Habitat")
nbss <- cbind(info, nbss[, -1])
ggplot(data=nbss,aes(x=log10binMid, y=log10totalBiomNorm, colour=Habitat))+
geom_point(size=5)+
geom_path(size=1)+
scale_colour_manual(values=c("black","gray"))+
labs(x=expression(Log[10]~"mid-point of"~size~class~(mg)), y=expression(Log[10]~normalized~biomass))+
theme_bw() %+replace% large #%+replace% dark
hab <- splitBy(~Habitat, data=mac)
wt <- lapply(hab, FUN=function(x)x$Wt)
bks <- l2b(unlist(wt))
out <- lapply(wt, FUN=function(x)LBNbiom.method(x, binBreaks=bks))
nbss <- ldply(lapply(out, FUN=function(x)x$binVals), data.frame)
info <- ldply(strsplit(nbss$.id, split="[|]"))
names(info) <- c("Habitat")
nbss <- cbind(info, nbss[, -1])
ggplot(data=nbss,aes(x=log10binMid, y=log10totalBiomNorm, colour=Habitat))+
geom_point(size=5)+
geom_path(size=1)+
scale_colour_manual(values=c("black","gray"))+
labs(x=expression(Log[10]~"mid-point of"~size~class~(mg)), y=expression(Log[10]~normalized~biomass))+
theme_bw() %+replace% large #%+replace% dark
# Only keep Wt > 7.812500e-03
hab <- splitBy(~Habitat, data=subset(mac, Wt>7.812500e-03))
wt <- lapply(hab, FUN=function(x)x$Wt)
out <- lapply(wt, FUN=function(x)LBNbiom.method(x, binBreaks=bks))
nbss <- ldply(lapply(out, FUN=function(x)x$binVals), data.frame)
info <- ldply(strsplit(nbss$.id, split="[|]"))
names(info) <- c("Habitat")
nbss <- cbind(info, nbss[, -1])
out <- lapply(wt, FUN=MLE.method)
# size specutrum slope estimate by MLE
lapply(out, FUN=function(x)x[1:2])
plb <- ldply(lapply(out, FUN=function(x)x$PLB))
info <- ldply(strsplit(plb$.id, split="[|]"))
names(info) <- c("Habitat")
plb <- cbind(info, plb[, -1])
ggplot(data=nbss,aes(x=log10binMid, y=log10totalBiomNorm, colour=Habitat))+
geom_point(size=5)+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB)))+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB.LC)), linetype=2)+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB.UC)), linetype=2)+
scale_colour_manual(values=c("black","gray"))+
labs(x=expression(Log[10]~"mid-point of"~size~class~(mg)), y=expression(Log[10]~normalized~biomass))+
theme_bw() %+replace% large #%+replace% dark
# Use functions from Edwards etal. (2017) Methods in Ecology and Evolution 1:57-67
# https://github.com/andrew-edwards/fitting-size-spectra
#source("PLBfunctions.r")
hab <- splitBy(~Habitat, data=mac)
wt <- lapply(hab, FUN=function(x)x$Wt)
bks <- l2b(unlist(wt))
out <- lapply(wt, FUN=function(x)LBNbiom.method(x, binBreaks=bks))
nbss <- ldply(lapply(out, FUN=function(x)x$binVals), data.frame)
info <- ldply(strsplit(nbss$.id, split="[|]"))
names(info) <- c("Habitat")
nbss <- cbind(info, nbss[, -1])
ggplot(data=nbss,aes(x=log10binMid, y=log10totalBiomNorm, colour=Habitat))+
geom_point(size=5)+
geom_path(size=1)+
scale_colour_manual(values=c("black","gray"))+
labs(x=expression(Log[10]~"mid-point of"~size~class~(mg)), y=expression(Log[10]~normalized~biomass))+
theme_bw() %+replace% large #%+replace% dark
# Only keep Wt > 7.812500e-03
hab <- splitBy(~Habitat, data=subset(mac, Wt>7.812500e-03))
wt <- lapply(hab, FUN=function(x)x$Wt)
out <- lapply(wt, FUN=function(x)LBNbiom.method(x, binBreaks=bks))
nbss <- ldply(lapply(out, FUN=function(x)x$binVals), data.frame)
info <- ldply(strsplit(nbss$.id, split="[|]"))
names(info) <- c("Habitat")
nbss <- cbind(info, nbss[, -1])
out <- lapply(wt, FUN=MLE.method)
# size specutrum slope estimate by MLE
lapply(out, FUN=function(x)x[1:2])
plb <- ldply(lapply(out, FUN=function(x)x$PLB))
info <- ldply(strsplit(plb$.id, split="[|]"))
names(info) <- c("Habitat")
plb <- cbind(info, plb[, -1])
ggplot(data=nbss,aes(x=log10binMid, y=log10totalBiomNorm, colour=Habitat))+
geom_point(size=5)+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB)))+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB.LC)), linetype=2)+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB.UC)), linetype=2)+
scale_colour_manual(values=c("black","gray"))+
labs(x=expression(Log[10]~"mid-point of"~size~class~(mg)), y=expression(Log[10]~normalized~biomass))+
theme_bw() %+replace% large #%+replace% dark
# Rank individual weight
SortWt <- lapply(hab, FUN=function(x)cbind(rank=1:length(x$Wt), weight=sort(x$Wt, decreasing=TRUE)))
SortWt <- ldply(SortWt)
info <- ldply(strsplit(SortWt$.id, split="[|]"))
names(info) <- c("Habitat")
SortWt <- cbind(info, SortWt[, -1])
ggplot(data=SortWt, aes(x=weight, y=rank, colour=Habitat))+
geom_point(size=3)+
geom_path(data=plb, aes(x=x.PLB, y=y.PLB))+
geom_path(data=plb, aes(x=x.PLB, y=y.PLB.LC), linetype=2)+
geom_path(data=plb, aes(x=x.PLB, y=y.PLB.UC), linetype=2)+
scale_colour_manual(values=c("black","gray"))+
scale_x_log10(expression(Individual~weight~(mg)))+
scale_y_log10("Individual rank", limits=c(1, NA))+
theme_bw() %+replace% large %+replace% rotate #%+replace% dark
hab <- splitBy(~Cruise+Habitat, data=mac)
wt <- lapply(hab, FUN=function(x)x$Wt)
out <- lapply(wt, FUN=function(x)LBNbiom.method(x, binBreaks=bks))
nbss <- ldply(lapply(out, FUN=function(x)x$binVals), data.frame)
info <- ldply(strsplit(nbss$.id, split="[|]"))
names(info) <- c("Cruise", "Habitat")
nbss <- cbind(info, nbss[, -1])
ggplot(data=nbss,aes(x=log10binMid, y=log10totalBiomNorm, colour=Habitat))+
geom_point(size=5)+
geom_path(size=1)+
facet_wrap(~Cruise, scales="free")+
scale_colour_manual(values=c("black","gray"))+
labs(x=expression(Log[10]~"mid-point of"~size~class~(mg)), y=expression(Log[10]~normalized~biomass))+
theme_bw() %+replace% large #%+replace% dark
# Only keep Wt > 7.812500e-03
hab <- splitBy(~Cruise+Habitat, data=subset(mac, Wt>7.812500e-03))
wt <- lapply(hab, FUN=function(x)x$Wt)
out <- lapply(wt, FUN=function(x)LBNbiom.method(x, binBreaks=bks))
nbss <- ldply(lapply(out, FUN=function(x)x$binVals), data.frame)
info <- ldply(strsplit(nbss$.id, split="[|]"))
names(info) <- c("Cruise", "Habitat")
nbss <- cbind(info, nbss[, -1])
out <- lapply(wt, FUN=MLE.method)
# size specutrum slope estimate by MLE
lapply(out, FUN=function(x)x[1:2])
plb <- ldply(lapply(out, FUN=function(x)x$PLB))
info <- ldply(strsplit(plb$.id, split="[|]"))
names(info) <- c("Cruise", "Habitat")
plb <- cbind(info, plb[, -1])
ggplot(data=nbss,aes(x=log10binMid, y=log10totalBiomNorm, colour=Habitat))+
geom_point(size=5)+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB)))+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB.LC)), linetype=2)+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB.UC)), linetype=2)+
facet_wrap(~Cruise, scales="free")+
scale_colour_manual(values=c("black","gray"))+
labs(x=expression(Log[10]~"mid-point of"~size~class~(mg)), y=expression(Log[10]~normalized~biomass))+
theme_bw() %+replace% large #%+replace% dark
# Rank individual weight
SortWt <- lapply(hab, FUN=function(x)cbind(rank=1:length(x$Wt), weight=sort(x$Wt, decreasing=TRUE)))
SortWt <- ldply(SortWt)
info <- ldply(strsplit(SortWt$.id, split="[|]"))
names(info) <- c("Cruise", "Habitat")
SortWt <- cbind(info, SortWt[, -1])
ggplot(data=SortWt, aes(x=weight, y=rank, colour=Habitat))+
geom_point(size=3)+
geom_path(data=plb, aes(x=x.PLB, y=y.PLB))+
geom_path(data=plb, aes(x=x.PLB, y=y.PLB.LC), linetype=2)+
geom_path(data=plb, aes(x=x.PLB, y=y.PLB.UC), linetype=2)+
scale_colour_manual(values=c("black","gray"))+
facet_wrap(~Cruise, scales="free")+
scale_x_log10(expression(Individual~weight~(mg)))+
scale_y_log10("Individual rank", limits=c(1, NA))+
theme_bw() %+replace% large %+replace% rotate #%+replace% dark
hab <- splitBy(~Habitat+Depth.zone, data=mac)
wt <- lapply(hab, FUN=function(x)x$Wt)
out <- lapply(wt, FUN=function(x)LBNbiom.method(x, binBreaks=bks))
nbss <- ldply(lapply(out, FUN=function(x)x$binVals), data.frame)
info <- ldply(strsplit(nbss$.id, split="[|]"))
names(info) <- c("Habitat", "Depth")
nbss <- cbind(info, nbss[, -1])
ggplot(data=nbss, aes(x=log10binMid, y=log10totalBiomNorm, colour=Habitat))+
geom_point(size=3)+
geom_path(size=1)+
scale_colour_manual(values=c("black","gray"))+
facet_wrap(~Depth, scales="free")+
labs(x=expression(Log[10]~"mid-point of"~size~class~(mg)), y=expression(Log[10]~normalized~biomass))+
theme_bw()%+replace% large #%+replace% dark
# Only keep Wt >7.812500e-03
hab <- splitBy(~Habitat+Depth.zone, data=subset(mac, Wt>7.812500e-03))
wt <- lapply(hab, FUN=function(x)x$Wt)
out <- lapply(wt, FUN=function(x)LBNbiom.method(x, binBreaks=bks))
nbss <- ldply(lapply(out, FUN=function(x)x$binVals), data.frame)
info <- ldply(strsplit(nbss$.id, split="[|]"))
names(info) <- c("Habitat", "Depth")
nbss <- cbind(info, nbss[, -1])
out <- lapply(wt, FUN=MLE.method)
# size specutrum slope estimate by MLE
lapply(out, FUN=function(x)x[1:2])
plb <- ldply(lapply(out, FUN=function(x)x$PLB))
info <- ldply(strsplit(plb$.id, split="[|]"))
names(info) <- c("Habitat", "Depth")
plb <- cbind(info, plb[, -1])
ggplot(data=nbss, aes(x=log10binMid, y=log10totalBiomNorm, colour=Habitat))+
geom_point(size=3)+
scale_colour_manual(values=c("black","gray"))+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB)))+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB.LC)), linetype=2)+
geom_path(data=plb, aes(x=log10(x.PLB), y=log10(B.PLB.UC)), linetype=2)+
facet_wrap(~Depth, scales="free")+
labs(x=expression(Log[10]~"mid-point of"~size~class~(mg)), y=expression(Log[10]~normalized~biomass))+
theme_bw()%+replace% large #%+replace% dark
install.packages(c("backports", "bipartite", "classInt", "devtools", "fs", "glue", "gstat", "intervals", "isoband", "lme4", "lubridate", "Rcpp", "RcppArmadillo", "reshape2", "sf", "spData", "usethis", "xfun", "xml2"))
install.packages(c("backports", "bipartite", "classInt", "devtools", "fs", "glue", "gstat", "intervals", "isoband", "lme4", "lubridate", "Rcpp", "RcppArmadillo", "reshape2", "sf", "spData", "usethis", "xfun", "xml2"))
library(bbbs)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
dat.mean <- summaryBy(Wt+Depth~Region+Habitat+Station, data=mac, FUN=c(mean, sd, length))
library(bbbs)
library(ggplot2)
library(plyr)
library(doBy)
library(readxl)
#library(devtools)
#install_github("andrew-edwards/sizeSpectra")
library(sizeSpectra)
large <- theme(legend.title = element_text(size=20),
legend.text = element_text(size=20),
axis.title = element_text(size=20),
axis.text = element_text(size=20))
rotate <- theme(axis.text.x = element_text(size=20, angle=60, hjust=0.5))
# dark theme for ggplot
dark <- theme(plot.background = element_rect(colour = 'NA', fill = 'gray10'),
panel.background = element_rect(colour = 'NA', fill = 'transparent'),
legend.background = element_rect(colour = 'NA', fill = 'transparent'),
legend.title = element_text(colour = 'white', size=20),
legend.text = element_text(colour = 'white', size=20),
axis.title = element_text(colour = 'white', size=20),
axis.text = element_text(colour = 'white', size=20),
axis.ticks = element_line(colour = 'white'),
panel.border = element_rect(fill = 'NA', colour = 'white'),
panel.grid.major = element_line(colour = 'gray30'),
panel.grid.minor = element_line(colour = 'gray20'))
# log2 bin
l2b <- function(x) 2^( floor(log2(min(x))) : ceiling(log2(max(x))) )
dat.mean <- summaryBy(Wt+Depth~Region+Habitat+Station, data=mac, FUN=c(mean, sd, length))
dat.mean$Wt.se <- dat.mean$Wt.sd/dat.mean$Wt.length^0.5
ggplot(data=dat.mean,
aes(x=Depth.mean, y=Wt.mean,
ymin=Wt.mean-Wt.se*1.96, ymax=Wt.mean+Wt.se*1.96,
colour=Habitat, linetype=Habitat))+
geom_point(size=5)+
scale_colour_manual(values=c("black","gray"))+
geom_errorbar(size=2)+
stat_smooth(method="lm", formula=y~x, alpha=0.2, colour="gray20", se=FALSE)+
scale_linetype_manual(values=c(1,2))+
labs(x="Depth (m)", y=expression(Mean~body~size~(mg~indiv^-1)))+
scale_y_log10()+
theme_bw() %+replace% large
ggplot(data=dat.mean,
aes(x=Depth.mean, y=Wt.mean,
ymin=Wt.mean-Wt.se*1.96, ymax=Wt.mean+Wt.se*1.96,
colour=Habitat, linetype=Habitat))+
geom_point(size=5)+
scale_colour_manual(values=c("black","gray"))+
geom_errorbar(width=2)+
stat_smooth(method="lm", formula=y~x, alpha=0.2, colour="gray20", se=FALSE)+
scale_linetype_manual(values=c(1,2))+
labs(x="Depth (m)", y=expression(Mean~body~size~(mg~indiv^-1)))+
scale_y_log10()+
theme_bw() %+replace% large
