stress <- paste("Stress = ", deparse(round(mei_md$stress,2)))
# Weighted Averages Scores
mei_wa <- wascores(mei_md$points, mei_sc) %>% as.data.frame
mei_wa$label <- row.names(mei_wa) %>% as.numeric
ggplot(data=cbind(mei_md$points, fr), aes(x=MDS1, y=MDS2, fill=Habitat, colour=Habitat))+
stat_ellipse(type="norm", geom="polygon", alpha=0.2, colour="transparent")+
geom_point(pch=21, alpha=0.8, size=5, colour=gray(0, 0.2))+
#geom_point(data=cbind(mei_md$points, fr) %>% subset(Cruise=="OR1_1114"), pch=21, size=2, fill="white", colour="black")+
annotate("text", x=-2, y=1.5, label=stress, size=5) +
geom_label_repel(data=mei_wa, aes(x=MDS1, y=MDS2, label=label), colour="black",
fill=gray(1, 0.6), size=4, label.padding = unit(0.2, "lines"), parse = TRUE)+
theme_bw() %+replace% large
# ordisurf:
mei_or <- ordisurf(mei_wa[,-3], mei_wa$label, plot = FALSE)
summary(mei_or)
mei_gr <- expand.grid(x = mei_or$grid$x, y = mei_or$grid$y) #get x and ys
mei_gr$z <- as.vector(mei_or$grid$z) #unravel the matrix for the z scores
mei_gr <- data.frame(na.omit(mei_gr)) #gets rid of the nas
# Predict ordisurf
newdata <- expand.grid(x1=seq(min(mei_md$points[,1]),  max(mei_md$points[,1]), len = 10), x2= seq(min(mei_md$points[,2]),  max(mei_md$points[,2]), len=10))
mei_gr2 <- cbind(newdata, z= predict(mei_or, newdata))
names(mei_gr2) <- c("x", "y", "z")
ggplot()+
stat_ellipse(data=cbind(mei_md$points, fr), geom = "polygon", aes(x=MDS1, y=MDS2, fill=Habitat), alpha = 0.2, type="norm")+
stat_contour(data = mei_gr2, aes(x = x, y = y, z = z, colour=..level..), binwidth = 0.5)+
geom_text_contour(data = mei_gr2, aes(x = x, y = y, z = z), colour="#08306b")+
geom_point(data=cbind(mei_md$points, fr), aes(x=MDS1, y=MDS2, fill=Habitat, colour=Habitat), pch=21, alpha=0.8, size=5, colour=gray(0, 0.2))+
labs(x="MDS1", y="MDS2", colour="Size")+
annotate("text", x=-2, y=1.5, label=stress, size=5)+
theme_bw() %+replace% large
mei_sc2 <- acast(mei_s, Cruise+Habitat+Station+Depth~Class, value.var = "Wt", fun.aggregate=mean, na.rm=TRUE)
mei_sc2[is.na(mei_sc2)] <- 0
fr <- strsplit(row.names(mei_sc2), split="_") %>%ldply
fr <- cbind(paste(fr$V1, fr$V2, sep="_"), fr[,-1:-2])
names(fr) <- c("Cruise", "Habitat", "Station", "Depth")
fr$Depth <- as.numeric(fr$Depth)
# Main effect
adonis(mei_sc2~Habitat+Cruise+Depth+Habitat:Depth+Habitat:Cruise+Depth:Cruise, data=fr, method="bray")
mei_s$Class <- cut(mei_s$Wt, breaks=bks, labels=log10((bks[-28]+bks[-1])/2) %>% round(digits = 1))
mei_sc <- acast(mei_s, Cruise+Habitat+Station+Deployment+Tube+Subcore+Depth~Class, value.var = "Wt", fun.aggregate=sum)
fr <- strsplit(row.names(mei_sc), split="_") %>%ldply
fr <- cbind(paste(fr$V1, fr$V2, sep="_"), fr[,-1:-2])
names(fr) <- c("Cruise", "Habitat", "Station", "Deployment", "Tube", "Subcore", "Depth")
fr$Depth <- as.numeric(fr$Depth)
# nMDS
mei_md <- metaMDS(mei_sc, distance = "bray")
stress <- paste("Stress = ", deparse(round(mei_md$stress,2)))
# Weighted Averages Scores
mei_wa <- wascores(mei_md$points, mei_sc) %>% as.data.frame
mei_wa$label <- row.names(mei_wa) %>% as.numeric
ggplot(data=cbind(mei_md$points, fr), aes(x=MDS1, y=MDS2, fill=Habitat, colour=Habitat))+
stat_ellipse(type="norm", geom="polygon", alpha=0.2, colour="transparent")+
geom_point(pch=21, alpha=0.8, size=5, colour=gray(0, 0.2))+
#geom_point(data=cbind(mei_md$points, fr) %>% subset(Cruise=="OR1_1114"), pch=21, size=2, fill="white", colour="black")+
annotate("text", x=-2, y=1.5, label=stress, size=5) +
geom_label_repel(data=mei_wa, aes(x=MDS1, y=MDS2, label=label), colour="black",
fill=gray(1, 0.6), size=4, label.padding = unit(0.2, "lines"), parse = TRUE)+
theme_bw() %+replace% large
# ordisurf:
mei_or <- ordisurf(mei_wa[,-3], mei_wa$label, plot = FALSE)
summary(mei_or)
mei_gr <- expand.grid(x = mei_or$grid$x, y = mei_or$grid$y) #get x and ys
mei_gr$z <- as.vector(mei_or$grid$z) #unravel the matrix for the z scores
mei_gr <- data.frame(na.omit(mei_gr)) #gets rid of the nas
# Predict ordisurf
newdata <- expand.grid(x1=seq(min(mei_md$points[,1]),  max(mei_md$points[,1]), len = 10), x2= seq(min(mei_md$points[,2]),  max(mei_md$points[,2]), len=10))
mei_gr2 <- cbind(newdata, z= predict(mei_or, newdata))
names(mei_gr2) <- c("x", "y", "z")
ggplot()+
stat_ellipse(data=cbind(mei_md$points, fr), geom = "polygon", aes(x=MDS1, y=MDS2, fill=Habitat), alpha = 0.2, type="norm")+
stat_contour(data = mei_gr2, aes(x = x, y = y, z = z, colour=..level..), binwidth = 0.5)+
geom_text_contour(data = mei_gr2, aes(x = x, y = y, z = z), colour="#08306b")+
geom_point(data=cbind(mei_md$points, fr), aes(x=MDS1, y=MDS2, fill=Habitat, colour=Habitat), pch=21, alpha=0.8, size=5, colour=gray(0, 0.2))+
labs(x="MDS1", y="MDS2", colour="Size")+
annotate("text", x=-2, y=1.5, label=stress, size=5)+
theme_bw() %+replace% large
mei_sc2 <- acast(mei_s, Cruise+Habitat+Station+Depth~Class, value.var = "Wt", fun.aggregate=mean, na.rm=TRUE)
mei_sc2[is.na(mei_sc2)] <- 0
fr <- strsplit(row.names(mei_sc2), split="_") %>%ldply
fr <- cbind(paste(fr$V1, fr$V2, sep="_"), fr[,-1:-2])
names(fr) <- c("Cruise", "Habitat", "Station", "Depth")
fr$Depth <- as.numeric(fr$Depth)
# Main effect
adonis(mei_sc2~Habitat+Cruise+Depth+Habitat:Depth+Habitat:Cruise+Depth:Cruise, data=fr, method="bray")
mac_s$Class <- cut(mac_s$Wt, breaks=bks, labels=log10((bks[-28]+bks[-1])/2) %>% round(digits = 1))
mac_sc <- acast(mac_s, Cruise+Habitat+Station+Deployment+Tube~Class, value.var = "Wt", fun.aggregate=sum)[-39,]
fr <- strsplit(row.names(mac_sc), split="_") %>%ldply
fr <- cbind(paste(fr$V1, fr$V2, sep="_"), fr[,-1:-2])
names(fr) <- c("Cruise", "Habitat", "Station", "Deployment", "Tube")
# nMDS
mac_md <- metaMDS(mac_sc, distance = "bray")
stress <- paste("Stress = ", deparse(round(mac_md$stress,2)))
# Weighted Averages Scores
mac_wa <- wascores(mac_md$points, mac_sc, expand = TRUE) %>% as.data.frame
mac_wa$label <- row.names(mac_wa) %>% as.numeric
ggplot(data=cbind(mac_md$points, fr), aes(x=MDS1, y=MDS2, fill=Habitat, colour=Habitat))+
stat_ellipse(type="norm", geom="polygon", alpha=0.2, colour="transparent")+
geom_point(pch=21, alpha=0.8, size=5, colour=gray(0, 0.2))+
#geom_point(data=cbind(mac_md$points, fr) %>% subset(Cruise=="OR1_1114"), pch=21, size=2, fill="white", colour="black")+
annotate("text", x=-1.2, y=1.2, label=stress, size=5) +
geom_label_repel(data=mac_wa, aes(x=MDS1, y=MDS2, label=label), colour="black",
fill=gray(1, 0.6), size=4, label.padding = unit(0.2, "lines"), parse = TRUE)+
theme_bw() %+replace% large
# ordisurf:
mac_or <- ordisurf(mac_wa[,-3], mac_wa$labe)
summary(mac_or)
mac_gr <- expand.grid(x = mac_or$grid$x, y = mac_or$grid$y) #get x and ys
mac_gr$z <- as.vector(mac_or$grid$z) #unravel the matrix for the z scores
mac_gr <- data.frame(na.omit(mac_gr)) #gets rid of the nas
# Predict ordisurf
newdata <- expand.grid(x1=seq(min(mac_md$points[,1]),  max(mac_md$points[,1]), len = 10), x2= seq(min(mac_md$points[,2]),  max(mac_md$points[,2]), len=10))
mac_gr2 <- cbind(newdata, z= predict(mac_or, newdata))
names(mac_gr2) <- c("x", "y", "z")
# ordisurf:
mac_or <- ordisurf(mac_wa[,-3], mac_wa$labe, plot=FALSE)
summary(mac_or)
mac_gr <- expand.grid(x = mac_or$grid$x, y = mac_or$grid$y) #get x and ys
mac_gr$z <- as.vector(mac_or$grid$z) #unravel the matrix for the z scores
mac_gr <- data.frame(na.omit(mac_gr)) #gets rid of the nas
# Predict ordisurf
newdata <- expand.grid(x1=seq(min(mac_md$points[,1]),  max(mac_md$points[,1]), len = 10), x2= seq(min(mac_md$points[,2]),  max(mac_md$points[,2]), len=10))
mac_gr2 <- cbind(newdata, z= predict(mac_or, newdata))
names(mac_gr2) <- c("x", "y", "z")
ggplot()+
stat_ellipse(data=cbind(mac_md$points, fr), geom = "polygon", aes(x=MDS1, y=MDS2, fill=Habitat), alpha = 0.2, type="norm")+
#stat_contour(data = mac_gr, aes(x = x, y = y, z = z, colour=..level..))+
#geom_text_contour(data = mac_gr, aes(x = x, y = y, z = z), colour="#08306b")+
geom_point(data=cbind(mac_md$points, fr), aes(x=MDS1, y=MDS2, fill=Habitat, colour=Habitat), pch=21, alpha=0.8, size=5, colour=gray(0, 0.2))+
labs(x="MDS1", y="MDS2", colour="Size")+
annotate("text", x=-1.2, y=1.2, label=stress, size=5) +
theme_bw() %+replace% large
mac_sc2 <- acast(mac_s, Cruise+Habitat+Station+Depth~Class, value.var = "Wt", fun.aggregate=mean, na.rm=TRUE)
mac_sc2[is.na(mac_sc2)] <- 0
fr <- strsplit(row.names(mac_sc2), split="_") %>%ldply
fr <- cbind(paste(fr$V1, fr$V2, sep="_"), fr[,-1:-2])
names(fr) <- c("Cruise", "Habitat", "Station", "Depth")
fr$Depth <- as.numeric(fr$Depth)
# Main effect
adonis(mac_sc2~Habitat+Cruise+Depth+Habitat:Depth+Habitat:Cruise+Depth:Cruise, data=fr, method="bray")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(knitr)
mei_s$Class <- cut(mei_s$Wt, breaks=bks, labels=log10((bks[-28]+bks[-1])/2) %>% round(digits = 1))
mei_sc <- acast(mei_s, Cruise+Habitat+Station+Deployment+Tube+Subcore+Depth~Class, value.var = "Wt", fun.aggregate=sum)
fr <- strsplit(row.names(mei_sc), split="_") %>%ldply
fr <- cbind(paste(fr$V1, fr$V2, sep="_"), fr[,-1:-2])
names(fr) <- c("Cruise", "Habitat", "Station", "Deployment", "Tube", "Subcore", "Depth")
fr$Depth <- as.numeric(fr$Depth)
# nMDS
mei_md <- metaMDS(mei_sc, distance = "bray")
stress <- paste("Stress = ", deparse(round(mei_md$stress,2)))
# Weighted Averages Scores
mei_wa <- wascores(mei_md$points, mei_sc) %>% as.data.frame
mei_wa$label <- row.names(mei_wa) %>% as.numeric
ggplot(data=cbind(mei_md$points, fr), aes(x=MDS1, y=MDS2, fill=Habitat, colour=Habitat))+
stat_ellipse(type="norm", geom="polygon", alpha=0.2, colour="transparent")+
geom_point(pch=21, alpha=0.8, size=5, colour=gray(0, 0.2))+
#geom_point(data=cbind(mei_md$points, fr) %>% subset(Cruise=="OR1_1114"), pch=21, size=2, fill="white", colour="black")+
annotate("text", x=-2, y=1.5, label=stress, size=5) +
geom_label_repel(data=mei_wa, aes(x=MDS1, y=MDS2, label=label), colour="black",
fill=gray(1, 0.6), size=4, label.padding = unit(0.2, "lines"), parse = TRUE)+
theme_bw() %+replace% large
# ordisurf:
mei_or <- ordisurf(mei_wa[,-3], mei_wa$label, plot = FALSE)
summary(mei_or)
mei_gr <- expand.grid(x = mei_or$grid$x, y = mei_or$grid$y) #get x and ys
mei_gr$z <- as.vector(mei_or$grid$z) #unravel the matrix for the z scores
mei_gr <- data.frame(na.omit(mei_gr)) #gets rid of the nas
# Predict ordisurf
newdata <- expand.grid(x1=seq(min(mei_md$points[,1]),  max(mei_md$points[,1]), len = 10), x2= seq(min(mei_md$points[,2]),  max(mei_md$points[,2]), len=10))
mei_gr2 <- cbind(newdata, z= predict(mei_or, newdata))
names(mei_gr2) <- c("x", "y", "z")
names(summary(mei_or))
summary(mei_or)$p.table
summary(mei_or)$s.table
# Main effect
f <- adonis(mei_sc2~Habitat+Cruise+Depth+Habitat:Depth+Habitat:Cruise+Depth:Cruise, data=fr, method="bray")
mei_sc2 <- acast(mei_s, Cruise+Habitat+Station+Depth~Class, value.var = "Wt", fun.aggregate=mean, na.rm=TRUE)
mei_sc2[is.na(mei_sc2)] <- 0
fr <- strsplit(row.names(mei_sc2), split="_") %>%ldply
fr <- cbind(paste(fr$V1, fr$V2, sep="_"), fr[,-1:-2])
names(fr) <- c("Cruise", "Habitat", "Station", "Depth")
fr$Depth <- as.numeric(fr$Depth)
# Main effect
f <- adonis(mei_sc2~Habitat+Cruise+Depth+Habitat:Depth+Habitat:Cruise+Depth:Cruise, data=fr, method="bray")
f
summary(f)
names(f)
f$aov.tab
kable(f$aov.tab)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(bbbs)
library(ggplot2)
library(ggrepel)
library(plyr)
library(doBy)
library(readxl)
library(reshape2)
library(vegan)
library(RColorBrewer)
library(metR)
library(knitr)
library(viridis)
library(ggdendro)
large <- theme(legend.title = element_text(size=20),
legend.text = element_text(size=20),
axis.title = element_text(size=20),
axis.text = element_text(size=20))
rotate <- theme(axis.text.x = element_text(size=20, angle=60, hjust=0.5))
# dark theme for ggplot
dark <- theme(plot.background = element_rect(colour = 'NA', fill = 'gray10'),
panel.background = element_rect(colour = 'NA', fill = 'transparent'),
legend.background = element_rect(colour = 'NA', fill = 'transparent'),
legend.title = element_text(colour = 'white', size=20),
legend.text = element_text(colour = 'white', size=20),
axis.title = element_text(colour = 'white', size=20),
axis.text = element_text(colour = 'white', size=20),
axis.ticks = element_line(colour = 'white'),
panel.border = element_rect(fill = 'NA', colour = 'white'),
panel.grid.major = element_line(colour = 'gray30'),
panel.grid.minor = element_line(colour = 'gray20'))
jet.colors <-
colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",
"#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
# log2 bin
l2b <- function(x) 2^( floor(log2(min(x))) : ceiling(log2(max(x))) )
bks <- l2b(c(mei_s$Wt, mac_s$Wt))
# Normalized enivronmental data to mean zero and unit variance
es <- as.data.frame(scale(env[, c(-1:-6, -11, -19:-21, -24)]))
names(es)[13] <- "Speed"
# Calculate absolute correlation coefficient
co <- as.dist(matrix(1, nrow=14, ncol=14)-abs(cor(es, use="pairwise.complete.obs")))
hc <- hclust(co, method="average")
# Convert dendrogram to ggplot style
dhc <- as.dendrogram(hc)
ghc    <- dendro_data(dhc, type="rectangle")
ggdendrogram(hc, rotate = FALSE)+
geom_hline(yintercept=0.1, linetype=2, colour="red")
mei_s$Class <- cut(mei_s$Wt, breaks=bks, labels=log10((bks[-28]+bks[-1])/2) %>% round(digits = 1))
mei_sc <- acast(mei_s, Cruise+Habitat+Station+Deployment+Tube+Subcore+Depth~Class, value.var = "Wt", fun.aggregate=sum)
fr <- strsplit(row.names(mei_sc), split="_") %>%ldply
fr <- cbind(paste(fr$V1, fr$V2, sep="_"), fr[,-1:-2])
names(fr) <- c("Cruise", "Habitat", "Station", "Deployment", "Tube", "Subcore", "Depth")
fr$Depth <- as.numeric(fr$Depth)
# Hierarchical Clustering based on square root transformed abundance data
# Agglomeration used group average (= UPGMA) method
d <- vegdist(mei_sc^0.25)
hc <- hclust(d, method="average")
labs <- strsplit(hc$labels, split="_") %>% ldply
hc$labels <- with(labs[,c(2,4)], paste(V2, V4, sep="_"))
# Convert dendrogram to ggplot style
dhc <- as.dendrogram(hc)
ghc    <- dendro_data(dhc, type="rectangle")
# Merge env data to dendrogram label data frame
ghc[["labels"]]   <- cbind(ghc[["labels"]], Habitat=labs$V3)
ggdendrogram(hc, rotate = FALSE)+
geom_point(data=label(ghc), aes(x, y, fill=Habitat), size=4, pch=21, colour=gray(0, 0.2))+
scale_fill_viridis(discrete = TRUE)
# nMDS
mei_md <- metaMDS(mei_sc^0.25, distance = "bray")
stress <- paste("Stress = ", deparse(round(mei_md$stress,2)))
# Weighted Averages Scores
mei_wa <- wascores(mei_md$points, mei_sc^0.25) %>% as.data.frame
mei_wa$label <- row.names(mei_wa) %>% as.numeric
ggplot(data=cbind(mei_md$points, fr), aes(x=MDS1, y=MDS2, fill=Habitat, colour=Habitat))+
stat_ellipse(type="norm", geom="polygon", alpha=0.2)+
geom_point(pch=21, alpha=0.8, size=5, colour=gray(0, 0.2))+
#geom_point(data=cbind(mei_md$points, fr) %>% subset(Cruise=="OR1_1114"), pch=21, size=2, fill="white", colour="black")+
scale_color_viridis(discrete = TRUE)+
scale_fill_viridis(discrete = TRUE)+
annotate("text", x=-1, y=1, label=stress, size=5) +
geom_label_repel(data=mei_wa, aes(x=MDS1, y=MDS2, label=label), colour="black",
fill=gray(1, 0.6), size=4, label.padding = unit(0.2, "lines"), parse = TRUE)+
theme_bw() %+replace% large
# ordisurf:
mei_or <- ordisurf(mei_wa[,-3], mei_wa$label, plot = FALSE)
summary(mei_or)
mei_gr <- expand.grid(x = mei_or$grid$x, y = mei_or$grid$y) #get x and ys
mei_gr$z <- as.vector(mei_or$grid$z) #unravel the matrix for the z scores
mei_gr <- data.frame(na.omit(mei_gr)) #gets rid of the nas
# Predict ordisurf
newdata <- expand.grid(x1=seq(min(mei_md$points[,1]),  max(mei_md$points[,1]), len = 10), x2= seq(min(mei_md$points[,2]),  max(mei_md$points[,2]), len=10))
mei_gr2 <- cbind(newdata, z= predict(mei_or, newdata))
names(mei_gr2) <- c("x", "y", "z")
ggplot()+
#stat_ellipse(data=cbind(mei_md$points, fr), geom = "polygon", aes(x=MDS1, y=MDS2, fill=Habitat), alpha = 0.2, type="norm")+
stat_contour(data = mei_gr2, aes(x = x, y = y, z = z, colour=..level..), binwidth = 0.5)+
geom_text_contour(data = mei_gr2, aes(x = x, y = y, z = z), colour="#08306b")+
geom_point(data=cbind(mei_md$points, fr), aes(x=MDS1, y=MDS2, fill=Habitat, colour=Habitat), pch=21, alpha=0.8, size=5, colour=gray(0, 0.2))+
scale_color_viridis(discrete = FALSE)+
scale_fill_viridis(discrete = TRUE)+
labs(x="MDS1", y="MDS2", colour="Size")+
annotate("text", x=-1, y=0.5, label=stress, size=5)+
theme_bw() %+replace% large
keep <- match(with(fr, paste(Cruise, Station)), with(env, paste(Cruise, Station)))
db <- dbrda(mei_sc^0.25~Speed+over20+CN+transmissometer+TOC+Porosity+Clay+Silt+Salinity+Temperature, distance = "bray", data=es[keep,])
fit <- as.data.frame(db$CCA$biplot)
sc <- min(abs(c(range(db$CCA$u[,1]), range(db$CCA$u[,1]))))
fit <- fit*sc*1.8
fit <- cbind(fit, label=c("Spd", "Over20", "CN", "Trans", "TOC", "Por", "Clay", "Silt", "Salin", "Temp"))
ggplot(data=cbind(as.data.frame(db$CCA$u), env[keep,]), aes(x=dbRDA1, y=dbRDA2))+
geom_point(size=5, pch=21, colour=gray(0, 0.2), alpha=0.8, aes(fill=Habitat))+
#geom_point(data=cbind(as.data.frame(db$CCA$u), env[keep,]) %>% subset(Cruise=="OR1_1114"), pch=21, size=4, fill="white", colour="black")+
stat_ellipse(type="norm", geom = "polygon", alpha = 0.2, aes(colour=Habitat, fill=Habitat))+
geom_segment(data=fit, aes(x=0, y=0, xend=dbRDA1, yend=dbRDA2), size=1,
arrow = arrow(length = unit(0.2,"cm")), colour=viridis(3, 0.6)[2])+
geom_label_repel(data=fit, aes(x=dbRDA1, y=dbRDA2, label=label), fill=viridis(3, 0.6)[2], colour="white", size=4, fontface = "bold")+
scale_color_viridis(discrete = TRUE)+
scale_fill_viridis(discrete = TRUE)+
theme_bw() %+replace% large
su <- summary(db)
cat("Constrained proportion = ", round(su$constr.chi/su$tot.chi*100, 1), "%", "\n",
"Unconstrained proportion = ", round(su$unconst.chi/su$tot.chi*100, 1), "%", "\n",
"dbRDA1 explains", round(su$cont$importance[2, 1]*100,1), "% of fit",
"and", round(su$cont$importance[2, 1]*100*su$constr.chi/su$tot.chi, 1), "% of total", "\n",
"dbRDA2 explains", round(su$cont$importance[2, 2]*100,1), "% of fit",
"and", round(su$cont$importance[2, 2]*100*su$constr.chi/su$tot.chi, 1), "% of total")
ordistep(db, permutations=999)
db <- dbrda(formula = mei_sc^0.25 ~ over20 + TOC + Porosity + Clay + Silt + Temperature, data = es[keep, ], distance = "bray")
fit <- as.data.frame(db$CCA$biplot)
sc <- min(abs(c(range(db$CCA$u[,1]), range(db$CCA$u[,1]))))
fit <- fit*sc*1.8
fit <- cbind(fit, label=c("Over20", "TOC", "Por", "Clay", "Silt", "Temp"))
ggplot(data=cbind(as.data.frame(db$CCA$u), env[keep,]), aes(x=dbRDA1, y=dbRDA2))+
geom_point(size=5, pch=21, colour=gray(0, 0.2), alpha=0.8, aes(fill=Habitat))+
#geom_point(data=cbind(as.data.frame(db$CCA$u), env[keep,]) %>% subset(Cruise=="OR1_1114"), pch=21, size=4, fill="white", colour="black")+
stat_ellipse(type="norm", geom = "polygon", alpha = 0.2, aes(colour=Habitat, fill=Habitat))+
geom_segment(data=fit, aes(x=0, y=0, xend=dbRDA1, yend=dbRDA2), size=1,
arrow = arrow(length = unit(0.2,"cm")), colour=viridis(3, 0.6)[2])+
geom_label_repel(data=fit, aes(x=dbRDA1, y=dbRDA2, label=label), fill=viridis(3, 0.6)[2], colour="white", size=4, fontface = "bold")+
scale_color_viridis(discrete = TRUE)+
scale_fill_viridis(discrete = TRUE)+
theme_bw() %+replace% large
su <- summary(db)
cat("Constrained proportion = ", round(su$constr.chi/su$tot.chi*100, 1), "%", "\n",
"Unconstrained proportion = ", round(su$unconst.chi/su$tot.chi*100, 1), "%", "\n",
"dbRDA1 explains", round(su$cont$importance[2, 1]*100,1), "% of fit",
"and", round(su$cont$importance[2, 1]*100*su$constr.chi/su$tot.chi, 1), "% of total", "\n",
"dbRDA2 explains", round(su$cont$importance[2, 2]*100,1), "% of fit",
"and", round(su$cont$importance[2, 2]*100*su$constr.chi/su$tot.chi, 1), "% of total")
fit <- envfit(mei_md$points, es[keep, c("over20", "TOC", "Porosity", "Clay", "Silt", "Temperature")])
lab <- data.frame(fit$vectors$arrows*1.2)
lab$label <- c("Over20", "TOC", "Por", "Clay", "Silt", "Temp")
ggplot(data=cbind(mei_md$points, env[keep,]), aes(x=MDS1, y=MDS2))+
geom_point(aes(fill=Habitat, colour=Habitat), pch=21, alpha=0.8, size=5, colour=gray(0, 0.2))+
#geom_point(data=cbind(mei_md$points, enve) %>% subset(Cruise=="OR1_1114"), pch=21, size=2, fill="white", colour="black")+
stat_ellipse(type="norm", geom = "polygon", alpha = 0.2, aes(colour=Habitat, fill=Habitat))+
annotate("text", x=-1, y=1, label=stress, size=5)+
geom_segment(data=lab, aes(x=0, y=0, xend=MDS1, yend=MDS2), size=1, arrow = arrow(length = unit(0.2,"cm")), colour=viridis(3, 0.6)[2])+
geom_label_repel(data=lab, aes(label=label), fill=viridis(3, 0.6)[2],
colour="white", size=5, label.padding = unit(0.2, "lines"))+
scale_fill_viridis(discrete = TRUE)+
scale_color_viridis(discrete = TRUE)+
theme_bw() %+replace% large
mei_sc2 <- acast(mei_s, Cruise+Habitat+Station+Depth~Class, value.var = "Wt", fun.aggregate=mean, na.rm=TRUE)
mei_sc2[is.na(mei_sc2)] <- 0
fr <- strsplit(row.names(mei_sc2), split="_") %>%ldply
fr <- cbind(paste(fr$V1, fr$V2, sep="_"), fr[,-1:-2])
names(fr) <- c("Cruise", "Habitat", "Station", "Depth")
fr$Depth <- as.numeric(fr$Depth)
# Main effect
f <- adonis(mei_sc2~Habitat+Cruise+Depth+Habitat:Depth+Habitat:Cruise+Depth:Cruise, data=fr, method="bray")
kable(f$aov.tab)
mac_s$Class <- cut(mac_s$Wt, breaks=bks, labels=log10((bks[-28]+bks[-1])/2) %>% round(digits = 1))
mac_sc <- acast(mac_s, Cruise+Habitat+Station+Deployment+Tube~Class, value.var = "Wt", fun.aggregate=sum)[-39,]
fr <- strsplit(row.names(mac_sc), split="_") %>%ldply
fr <- cbind(paste(fr$V1, fr$V2, sep="_"), fr[,-1:-2])
names(fr) <- c("Cruise", "Habitat", "Station", "Deployment", "Tube")
# Hierarchical Clustering based on square root transformed abundance data
# Agglomeration used group average (= UPGMA) method
d <- vegdist(mac_sc^0.25)
hc <- hclust(d, method="average")
labs <- strsplit(hc$labels, split="_") %>% ldply
hc$labels <- with(labs[,c(2,4)], paste(V2, V4, sep="_"))
# Convert dendrogram to ggplot style
dhc <- as.dendrogram(hc)
ghc    <- dendro_data(dhc, type="rectangle")
# Merge env data to dendrogram label data frame
ghc[["labels"]]   <- cbind(ghc[["labels"]], Habitat=labs$V3)
ggdendrogram(hc, rotate = FALSE)+
geom_point(data=label(ghc), aes(x, y, fill=Habitat), size=4, pch=21, colour=gray(0, 0.2))+
scale_fill_viridis(discrete = TRUE)
# nMDS
mac_md <- metaMDS(mac_sc^0.25, distance = "bray")
stress <- paste("Stress = ", deparse(round(mac_md$stress,2)))
# Weighted Averages Scores
mac_wa <- wascores(mac_md$points, mac_sc^0.25) %>% as.data.frame
mac_wa$label <- row.names(mac_wa) %>% as.numeric
ggplot(data=cbind(mac_md$points, fr), aes(x=MDS1, y=MDS2, fill=Habitat, colour=Habitat))+
stat_ellipse(type="norm", geom="polygon", alpha=0.2)+
geom_point(pch=21, alpha=0.8, size=5, colour=gray(0, 0.2))+
scale_color_viridis(discrete = TRUE)+
scale_fill_viridis(discrete = TRUE)+
annotate("text", x=-1.2, y=1.2, label=stress, size=5) +
geom_label_repel(data=mac_wa, aes(x=MDS1, y=MDS2, label=label), colour="black",
fill=gray(1, 0.6), size=4, label.padding = unit(0.2, "lines"), parse = TRUE)+
theme_bw() %+replace% large
mac_s$Class <- cut(mac_s$Wt, breaks=bks, labels=log10((bks[-28]+bks[-1])/2) %>% round(digits = 1))
mac_sc <- acast(mac_s, Cruise+Habitat+Station+Deployment+Tube~Class, value.var = "Wt", fun.aggregate=sum)[-39,]
fr <- strsplit(row.names(mac_sc), split="_") %>%ldply
fr <- cbind(paste(fr$V1, fr$V2, sep="_"), fr[,-1:-2])
names(fr) <- c("Cruise", "Habitat", "Station", "Deployment", "Tube")
# Hierarchical Clustering based on square root transformed abundance data
# Agglomeration used group average (= UPGMA) method
d <- vegdist(mac_sc^0.25)
hc <- hclust(d, method="average")
labs <- strsplit(hc$labels, split="_") %>% ldply
hc$labels <- with(labs[,c(2,4)], paste(V2, V4, sep="_"))
# Convert dendrogram to ggplot style
dhc <- as.dendrogram(hc)
ghc    <- dendro_data(dhc, type="rectangle")
# Merge env data to dendrogram label data frame
ghc[["labels"]]   <- cbind(ghc[["labels"]], Habitat=labs$V3)
ggdendrogram(hc, rotate = FALSE)+
geom_point(data=label(ghc), aes(x, y, fill=Habitat), size=4, pch=21, colour=gray(0, 0.2))+
scale_fill_viridis(discrete = TRUE)
# nMDS
mac_md <- metaMDS(mac_sc^0.25, distance = "bray")
stress <- paste("Stress = ", deparse(round(mac_md$stress,2)))
# Weighted Averages Scores
mac_wa <- wascores(mac_md$points, mac_sc^0.25) %>% as.data.frame
mac_wa$label <- row.names(mac_wa) %>% as.numeric
ggplot(data=cbind(mac_md$points, fr), aes(x=MDS1, y=MDS2, fill=Habitat, colour=Habitat))+
stat_ellipse(type="norm", geom="polygon", alpha=0.2)+
geom_point(pch=21, alpha=0.8, size=5, colour=gray(0, 0.2))+
scale_color_viridis(discrete = TRUE)+
scale_fill_viridis(discrete = TRUE)+
annotate("text", x=-1.2, y=1.2, label=stress, size=5) +
geom_label_repel(data=mac_wa, aes(x=MDS1, y=MDS2, label=label), colour="black",
fill=gray(1, 0.6), size=4, label.padding = unit(0.2, "lines"), parse = TRUE)+
theme_bw() %+replace% large
# ordisurf:
mac_or <- ordisurf(mac_wa[,-3], mac_wa$labe, plot=FALSE)
summary(mac_or)
mac_gr <- expand.grid(x = mac_or$grid$x, y = mac_or$grid$y) #get x and ys
mac_gr$z <- as.vector(mac_or$grid$z) #unravel the matrix for the z scores
mac_gr <- data.frame(na.omit(mac_gr)) #gets rid of the nas
# Predict ordisurf
newdata <- expand.grid(x1=seq(min(mac_md$points[,1]),  max(mac_md$points[,1]), len = 10), x2= seq(min(mac_md$points[,2]),  max(mac_md$points[,2]), len=10))
mac_gr2 <- cbind(newdata, z= predict(mac_or, newdata))
names(mac_gr2) <- c("x", "y", "z")
ggplot()+
#stat_ellipse(data=cbind(mac_md$points, fr), geom = "polygon", aes(x=MDS1, y=MDS2, fill=Habitat), alpha = 0.2, type="norm")+
stat_contour(data = mac_gr, aes(x = x, y = y, z = z, colour=..level..))+
#geom_text_contour(data = mac_gr, aes(x = x, y = y, z = z), colour="#08306b")+
geom_point(data=cbind(mac_md$points, fr), aes(x=MDS1, y=MDS2, fill=Habitat, colour=Habitat), pch=21, alpha=0.8, size=5, colour=gray(0, 0.2))+
scale_color_viridis(discrete = FALSE)+
scale_fill_viridis(discrete = TRUE)+
labs(x="MDS1", y="MDS2", colour="Size")+
annotate("text", x=-1, y=1.2, label=stress, size=5) +
theme_bw() %+replace% large
keep <- match(with(fr, paste(Cruise, Station)), with(env, paste(Cruise, Station)))
db <- dbrda(mac_sc^0.25~Speed+over20+CN+transmissometer+TOC+Porosity+Clay+Silt+Salinity+Temperature, distance = "bray", data=es[keep,])
fit <- as.data.frame(db$CCA$biplot)
sc <- min(abs(c(range(db$CCA$u[,1]), range(db$CCA$u[,1]))))
fit <- fit*sc*1.8
fit <- cbind(fit, label=c("Spd", "Over20", "CN", "Trans", "TOC", "Por", "Clay", "Silt", "Salin", "Temp"))
ggplot(data=cbind(as.data.frame(db$CCA$u), env[keep,]), aes(x=dbRDA1, y=dbRDA2))+
geom_point(size=5, pch=21, colour=gray(0, 0.2), alpha=0.8, aes(fill=Habitat))+
#geom_point(data=cbind(as.data.frame(db$CCA$u), env[keep,]) %>% subset(Cruise=="OR1_1114"), pch=21, size=4, fill="white", colour="black")+
stat_ellipse(type="norm", geom = "polygon", alpha = 0.2, aes(colour=Habitat, fill=Habitat))+
geom_segment(data=fit, aes(x=0, y=0, xend=dbRDA1, yend=dbRDA2), size=1,
arrow = arrow(length = unit(0.2,"cm")), colour=viridis(3, 0.6)[2])+
geom_label_repel(data=fit, aes(x=dbRDA1, y=dbRDA2, label=label), fill=viridis(3, 0.6)[2], colour="white", size=4, fontface = "bold")+
scale_color_viridis(discrete = TRUE)+
scale_fill_viridis(discrete = TRUE)+
theme_bw() %+replace% large
su <- summary(db)
cat("Constrained proportion = ", round(su$constr.chi/su$tot.chi*100, 1), "%", "\n",
"Unconstrained proportion = ", round(su$unconst.chi/su$tot.chi*100, 1), "%", "\n",
"dbRDA1 explains", round(su$cont$importance[2, 1]*100,1), "% of fit",
"and", round(su$cont$importance[2, 1]*100*su$constr.chi/su$tot.chi, 1), "% of total", "\n",
"dbRDA2 explains", round(su$cont$importance[2, 2]*100,1), "% of fit",
"and", round(su$cont$importance[2, 2]*100*su$constr.chi/su$tot.chi, 1), "% of total")
ordistep(db, permutations=999)
db <- dbrda(formula = mac_sc^0.25 ~ Speed + over20 + CN + transmissometer + Porosity + Silt + Temperature, data = es[keep, ], distance = "bray")
fit <- as.data.frame(db$CCA$biplot)
sc <- min(abs(c(range(db$CCA$u[,1]), range(db$CCA$u[,1]))))
fit <- fit*sc*1.8
fit <- cbind(fit, label=c("Speed", "Over20", "CN", "Trans", "Por", "Silt", "Temp"))
ggplot(data=cbind(as.data.frame(db$CCA$u), env[keep,]), aes(x=dbRDA1, y=dbRDA2))+
geom_point(size=5, pch=21, colour=gray(0, 0.2), alpha=0.8, aes(fill=Habitat))+
#geom_point(data=cbind(as.data.frame(db$CCA$u), env[keep,]) %>% subset(Cruise=="OR1_1114"), pch=21, size=4, fill="white", colour="black")+
stat_ellipse(type="norm", geom = "polygon", alpha = 0.2, aes(colour=Habitat, fill=Habitat))+
geom_segment(data=fit, aes(x=0, y=0, xend=dbRDA1, yend=dbRDA2), size=1,
arrow = arrow(length = unit(0.2,"cm")), colour=viridis(3, 0.6)[2])+
geom_label_repel(data=fit, aes(x=dbRDA1, y=dbRDA2, label=label), fill=viridis(3, 0.6)[2], colour="white", size=4, fontface = "bold")+
scale_color_viridis(discrete = TRUE)+
scale_fill_viridis(discrete = TRUE)+
theme_bw() %+replace% large
fit <- envfit(mac_md$points, es[keep, c("Speed", "over20", "CN", "transmissometer", "Porosity", "Silt", "Temperature")])
lab <- data.frame(fit$vectors$arrows*1.2)
lab$label <- c("Speed", "Over20", "CN", "Trans", "Por", "Silt", "Temp")
ggplot(data=cbind(mac_md$points, env[keep,]), aes(x=MDS1, y=MDS2))+
geom_point(aes(fill=Habitat, colour=Habitat), pch=21, alpha=0.8, size=5, colour=gray(0, 0.2))+
#geom_point(data=cbind(mei_md$points, enve) %>% subset(Cruise=="OR1_1114"), pch=21, size=2, fill="white", colour="black")+
stat_ellipse(type="norm", geom = "polygon", alpha = 0.2, aes(colour=Habitat, fill=Habitat))+
annotate("text", x=-1.2, y=1.2, label=stress, size=5)+
geom_segment(data=lab, aes(x=0, y=0, xend=MDS1, yend=MDS2), size=1, arrow = arrow(length = unit(0.2,"cm")), colour=viridis(3, 0.6)[2])+
geom_label_repel(data=lab, aes(label=label), fill=viridis(3, 0.6)[2],
colour="white", size=5, label.padding = unit(0.2, "lines"))+
scale_fill_viridis(discrete = TRUE)+
scale_color_viridis(discrete = TRUE)+
theme_bw() %+replace% large
mac_sc2 <- acast(mac_s, Cruise+Habitat+Station+Depth~Class, value.var = "Wt", fun.aggregate=mean, na.rm=TRUE)
mac_sc2[is.na(mac_sc2)] <- 0
fr <- strsplit(row.names(mac_sc2), split="_") %>%ldply
fr <- cbind(paste(fr$V1, fr$V2, sep="_"), fr[,-1:-2])
names(fr) <- c("Cruise", "Habitat", "Station", "Depth")
fr$Depth <- as.numeric(fr$Depth)
# Main effect
f <- adonis(mac_sc2~Habitat+Cruise+Depth+Habitat:Depth+Habitat:Cruise+Depth:Cruise, data=fr, method="bray")
kable(f$aov.tab)
