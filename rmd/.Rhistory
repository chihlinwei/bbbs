labs(y="Frequency", x=expression(Log~body~size~(mg~individual^-1)))+
theme_bw()%+replace% large #%+replace% dark
# Sorting data
mei_a   <- read_excel("../excel/GPSC_meio_sorting_2016.08.18.xlsx", sheet=2)
Category <- as.character(mei_a$Taxon)
Category[Category=="Copepoda"] <- "Harpacticoida"
Category[Category!="Nematoda" & Category!="Harpacticoida"] <- "Others"
mei_a <- cbind(Category, mei_a)
mei_a <- subset(mei_a, Subcore!="water")
# Match the sample names (tube) in size data to the sample names (tube) in sorting data
# Extract the total abudance from the sorting data
sn <- with(mei_a, paste(Category, Cruise, Station, Deployment, Tube, Subcore, sep="|"))
mei_s <- splitBy(~Category+Cruise+Station+Deployment+Tube+Subcore, mei)
abund <- mei_a[match(names(mei_s), sn),]$Abundance
# Resample the size data (with replacement) by the total abundance in each sample
sample_fun <-
function(i){
keep <- sample(1:dim(mei_s[[i]])[1], si=abund[i], replace=TRUE)
mei_s[[i]][keep,]
}
# Only Nematoda needs to be resampled
kp <- grep("Nematoda", names(mei_s))
# indentify nematode
id <- lapply(mei_s, FUN=function(x)dim(x)[1])%>%unlist%>%as.vector
# Only simulate size data when the numbers of sorted nematodes > numbers of indentified nematodes
kp <- kp[abund[kp] > id[kp]]
# Simulated size data
cl<-makeCluster(4) # change the 4 to your number of CPU cores
registerDoSNOW(cl) # register the SNOW parallel backend with the foreach package
simu <- foreach(i=kp) %dopar% sample_fun(i)
stopCluster(cl) # stop a SNOW cluster
# Replace with the simulated Nematoda data
for(i in 1:length(kp)) mei_s[[kp[i]]] <- simu[[i]]
mei_s <- ldply(mei_s, .id=NULL)
ggplot(data=mei_s,
aes(x=log10(Wt), fill=Habitat))+
geom_density(alpha=0.5)+
scale_fill_manual(values=c("black", "gray"))+
facet_grid(Cruise~Category, scale="free")+
labs(y="Frequency", x=expression(Log[10]~body~size~(mg)))+
theme_bw() %+replace% large  #%+replace% dark
# CTD data
ctd <- as.data.frame(read_excel("../excel/GPSC_CTD_2020.07.23.xlsx", sheet=1))
ctd <- splitBy(~Cruise+Station, ctd)
# Function to get average of bottom 3 deepest CTD data
deep_fun <- function(x) {
dat <- x[order(x$pressure, decreasing=TRUE)[1:3],]
summaryBy(.~Cruise+Station, data=dat, keep.names=TRUE, na.rm=TRUE)
}
ctd <- lapply(ctd, FUN=deep_fun)
ctd <- ldply(ctd)[, -1]
ctd$transmissometer[ctd$transmissometer<=0] <- 0 # Set negtive transmissometer to zero
# Average temperature, sigma_theta and density
ctd$Temperature <- rowMeans(ctd[, c("temperature_T1", "temperature_T2")], na.rm=TRUE)
ctd$Salinity <- rowMeans(ctd[, c("salinity_T1C1", "salinity_T2C2")], na.rm=TRUE)
ctd$Sigma_theta <- rowMeans(ctd[, c("density_T1C1...11", "density_T2C2...12")], na.rm=TRUE)
ctd$Density <- rowMeans(ctd[, c("density_T1C1...13", "density_T2C2...14")], na.rm=TRUE)
ctd <- subset(ctd, Cruise=="OR1_1096"|Cruise=="OR1_1102"|Cruise=="OR1_1114"|Cruise=="OR1_1126")
ctd <- ctd[order(ctd$Cruise, ctd$Station),]
ctd <- ctd[, c("Cruise", "Station", "Latitude", "Longitude", "pressure", "Temperature", "Salinity", "Density", "Oxygen", "fluorometer", "transmissometer")]
# Sediment data
col_types <- c(rep("text", 2), "numeric", "text", rep("numeric", 13))
sed <- as.data.frame(read_excel("../excel/GPSC_sediment_2020.06.17.xlsx", sheet=1, col_types=col_types))
sed <- sed[sed$Section=="0-1",]
sed <- subset(sed, Cruise=="OR1_1096"|Cruise=="OR1_1102"|Cruise=="OR1_1114"|Cruise=="OR1_1126")
sed <- sed[order(sed$Cruise, sed$Station),]
sed <- sed[, c("Cruise", "Station", "Deployment", "Section", "Clay", "Silt", "Sand", "CN", "TOC", "TN", "WC", "WW", "DW")]
# Tidal current data
tc <- read.csv("../excel/GPSC_tidal_current.csv")
id1 <- with(tc, paste(Cruise, Station))
id2 <- with(sed, paste(Cruise, Station))
tc <- tc[match(id2, id1), c("Speed.mean", "Speed.max", "over20")]
loc <- read_excel("../excel/GPSC_macro_sorting_2020.07.31.xlsx", sheet=1)
loc <- subset(loc, Cruise=="OR1_1096"|Cruise=="OR1_1102"|Cruise=="OR1_1114"|Cruise=="OR1_1126")
loc <- summaryBy(Longitude+Latitude+Depth~Cruise+Station+Habitat, data=as.data.frame(loc), FUN=mean, keep.names = TRUE)
sed <- cbind(loc, sed[, -1:-3])
# Calculate porosity
# Pore space volume using pore water mass bottom water density
# Fill in seawater desnity for sites not having CTD data
library(seacarb)
dens <- ctd$Density
vp <- (sed$WW-sed$DW)/(dens/1000)
# Dry sediment volume assuming density of 2.65 g/cm3
vb <- sed$DW/2.65
sed$Porosity <- vp/(vp+vb)
env <- cbind(loc, ctd[,-1:-5], sed[,-1:-7], tc)
kable(env)
kable(env)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(bbbs)
library(ggplot2)
library(plyr)
library(doBy)
library(readxl)
library(knitr)
library(swtmap)
library(TWBathyMap)
library(maptools)
library(nlme)
large <- theme(legend.title = element_text(size=20),
legend.text = element_text(size=20),
axis.title = element_text(size=20),
axis.text = element_text(size=20))
# dark theme for ggplot
dark <- theme(plot.background = element_rect(colour = 'NA', fill = 'gray10'),
panel.background = element_rect(colour = 'NA', fill = 'transparent'),
legend.background = element_rect(colour = 'NA', fill = 'transparent'),
legend.title = element_text(colour = 'white', size=20),
legend.text = element_text(colour = 'white', size=20),
axis.title = element_text(colour = 'white', size=20),
axis.text = element_text(colour = 'white', size=20),
axis.ticks = element_line(colour = 'white'),
panel.border = element_rect(fill = 'NA', colour = 'white'),
panel.grid.major = element_line(colour = 'gray30'),
panel.grid.minor = element_line(colour = 'gray20'))
jet.colors <-colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",
"#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
# Convert the numbers of polychaete specimen (with head) to abundance
pols <- subset(mac, Taxon=="Polychaeta" & (Condition=="FH" | Condition=="C" | Condition=="FHT"))
pola <- summaryBy(Size~Cruise+Station+Deployment+Tube+Taxon, data=pols, FUN=length, var.names="Abundance", keep.names = T)
pola <- cbind(pola[, 1:4], Section="0-15", pola[, 5:6], Comment="")
# Replace polycahete sorting abundance with correct abundance from size data
sort <- read_excel("../excel/GPSC_macro_sorting_2020.07.31.xlsx", sheet=2)
sort <- rbind(subset(sort, Taxon!="Polychaeta"), pola)
# Remove Cyclopoida and Calanoida
sort <- subset(sort, !(Taxon=="Cyclopoida"|Taxon=="Calanoida"))
# Total abundance by tube
abun <- summaryBy(Abundance~Cruise+Station+Deployment+Tube, data=as.data.frame(sort), FUN=sum, keep.names = TRUE)
depth <- read_excel("../excel/GPSC_macro_sorting_2020.07.31.xlsx", sheet=1)
abun <- cbind(depth[match(paste(abun$Cruise, abun$Station), paste(depth$Cruise, depth$Station)),], Abundance=abun$Abundance)
dat <- subset(abun, Cruise=="OR1_1096"|Cruise=="OR1_1102"|Cruise=="OR1_1114"|Cruise=="OR1_1126")
# Remove outlier samples with only 1 individuals
bad <- with(dat, Abundance <=1 | (Cruise=="OR1_1102" & Station == "GS4") )
dat <- subset(dat, !bad)
dat$Density <- dat$Abundance/dat$Area
dat.mean <- summaryBy(Density+Longitude+Latitude+Depth+Date~Habitat+Cruise+Station, data=dat, FUN=c(mean, sd, length))
dat.mean$Date.mean <- strftime(as.POSIXct(dat.mean$Date.mean, origin = "1970-01-01", tz = "Asia/Taipei"), format="%Y-%m-%d")
dat.mean$Density.se <- dat.mean$Density.sd/dat.mean$Density.length^0.5
out <- dat.mean[, c("Habitat", "Cruise", "Station", "Longitude.mean", "Latitude.mean", "Depth.mean", "Date.mean", "Density.length", "Density.mean", "Density.sd", "Density.se")]
names(out) <- c("Habitat", "Cruise", "Station", "Longitude", "Latitude", "Depth", "Date", "n", "Density", "sd", "se")
#out$Longitude <- round(out$Longitude, 4)
#out$Latitude <- round(out$Latitude, 4)
#out$Depth <- round(out$Depth, 0)
#out$Density <- round(out$Density, 0)
#out$sd <- round(out$sd, 1)
#out$se <- round(out$se, 1)
kable(out, align="c", caption="OR1_1102 GS4, OR1_1126 GC2, and OR1_1126 GC3 Tube 2 had very low abundance and only single replication. They are removed as outliers before plotting")
splitBy(~Habitat, out) %>% lapply(FUN=function(x)lm(log10(Density)~Depth, data=x) %>% summary)
ggplot(data=out,
aes(x=Depth, y=log10(Density),
ymin=log10(Density-se), ymax=log10(Density+se),
colour=Habitat, fill=Habitat, linetype=Habitat,
shape=Habitat))+
geom_point(size=5, position = "dodge")+
stat_smooth(data=subset(out, Habitat=="Canyon"), method="lm", formula=y~x, alpha=0.2)+
geom_errorbar(linetype=1, position = "dodge")+
scale_colour_manual(values=c("#e41a1c", "#4daf4a"))+
scale_fill_manual(values=c("#e41a1c", "#4daf4a"))+
scale_linetype_manual(values=c(1,2))+
scale_shape_manual(values=c(19,1))+
labs(x="Depth (m)", y=expression(Log[10]~density~(ind~m^-2)))+
#scale_y_log10()+
theme_bw() %+replace% large #%+replace% dark
f <- gls(log10(Density) ~ Habitat+Depth+Cruise+Habitat:Depth+Habitat:Cruise+Depth:Cruise, data=out, method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# Function to plot dianotics plot
dianostic_plot <-
function(f, y){
# standardized residuals versus fitted values
a1 <- plot(f, resid(., type = "p") ~ fitted(.) | Habitat, abline = 0)
a2 <- plot(f, resid(., type = "p") ~ fitted(.) | Cruise, abline = 0)
a3 <- plot(f, resid(., type = "p") ~ fitted(.), abline = 0)
# box-plots of residuals
b1<-plot(f, Habitat ~ resid(.))
b2 <- plot(f, Cruise ~ resid(.))
# observed versus fitted values
c1<-plot(f, paste(paste(y, "fitted(.)", sep="~"), "Habitat", sep="|") %>% formula, abline = c(0,1))
c2<-plot(f, paste(paste(y, "fitted(.)", sep="~"), "Cruise", sep="|") %>% formula, abline = c(0,1))
c3<-plot(f, paste(y, "fitted(.)", sep="~") %>% formula, abline = c(0,1))
# QQ plot
d1<-qqnorm(f, ~ resid(., type = "p") | Habitat, abline = c(0,1))
d2<-qqnorm(f, ~ resid(., type = "p") | Cruise, abline = c(0,1))
d3<-qqnorm(f, ~ resid(., type = "p"), abline = c(0,1))
print(a1, split=c(1,1,3,4), more=TRUE)
print(a2, split=c(2,1,3,4), more=TRUE)
print(a3, split=c(3,1,3,4), more=TRUE)
print(b1, split=c(1,2,3,4), more=TRUE)
print(b2, split=c(2,2,3,4), more=TRUE)
#
print(c1, split=c(1,3,3,4), more=TRUE)
print(c2, split=c(2,3,3,4), more=TRUE)
print(c3, split=c(3,3,3,4), more=TRUE)
print(d1, split=c(1,4,3,4), more=TRUE)
print(d2, split=c(2,4,3,4), more=TRUE)
print(d3, split=c(3,4,3,4))
}
dianostic_plot(f, y = "log10(Density)")
# In canyon
f <- gls(log10(Density) ~ Depth+Cruise+Depth:Cruise, data=subset(out, Habitat == "Canyon"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# On slope
f <- gls(log10(Density) ~ Depth+Cruise+Depth:Cruise, data=subset(out, Habitat == "Slope"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# OR1 1096
f <- gls(log10(Density) ~ Habitat+Depth+Habitat:Depth, data=subset(out, Cruise=="OR1_1096"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# OR1 1102
f <- gls(log10(Density) ~ Habitat+Depth+Habitat:Depth, data=subset(out, Cruise=="OR1_1102"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# OR1 1114
f <- gls(log10(Density) ~ Habitat+Depth+Habitat:Depth, data=subset(out, Cruise=="OR1_1114"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# OR1 1126
f <- gls(log10(Density) ~ Habitat+Depth+Habitat:Depth, data=subset(out, Cruise=="OR1_1126"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
dat.mean <- summaryBy(Density+Longitude+Latitude+Depth~Habitat+Station, data=out, FUN=c(mean, sd, length))
dat.mean$Density.se <- dat.mean$Density.sd/dat.mean$Density.length^0.5
out <- dat.mean[,c("Habitat", "Station", "Longitude.mean", "Latitude.mean", "Depth.mean", "Density.length", "Density.mean", "Density.sd", "Density.se")]
names(out) <- c("Habitat", "Station", "Longitude", "Latitude", "Depth","n", "Density", "sd", "se")
out$Longitude <- round(out$Longitude, 4)
out$Latitude <- round(out$Latitude, 4)
out$Depth <- round(out$Depth, 0)
out$Density <- round(out$Density, 0)
out$sd <- round(out$sd, 1)
out$sd <- round(out$se, 1)
kable(out, align="c")
ggplot(data=out,
aes(x=Depth, y=log10(Density),
ymin=log10(Density-se), ymax=log10(Density+se),
colour=Habitat, fill=Habitat, linetype=Habitat, shape=Habitat))+
geom_point(size=5, position = "dodge")+
stat_smooth(method="lm", formula=y~x, alpha=0.2)+
geom_errorbar(linetype=1, position = "dodge")+
scale_colour_manual(values=c("#e41a1c", "#4daf4a"))+
scale_fill_manual(values=c("#e41a1c", "#4daf4a"))+
scale_linetype_manual(values=c(1,2))+
scale_shape_manual(values=c(19,1))+
labs(x="Depth (m)", y=expression(Log[10]~density~(ind~m^-2)))+
theme_bw() %+replace% large #%+replace% dark
dat <- mac
dat <- subset(dat, Cruise=="OR1_1096"|Cruise=="OR1_1102"|Cruise=="OR1_1114"|Cruise=="OR1_1126")
dat.sum <- summaryBy(Wt+Area+Longitude+Latitude+Depth~Habitat+Cruise+Station+Deployment+Tube, data=dat, FUN=c(sum, mean))
dat.sum$Biomass <- dat.sum$Wt.sum/dat.sum$Area.mean
dat.mean <- summaryBy(Biomass+Longitude.mean+Latitude.mean+Depth.mean~Habitat+Cruise+Station, data=dat.sum, FUN=c(mean, sd, length))
dat.mean$Biomass.se <- dat.mean$Biomass.sd/dat.mean$Biomass.length^0.5
out <- dat.mean[, c("Habitat", "Cruise", "Station", "Longitude.mean.mean", "Latitude.mean.mean", "Depth.mean.mean", "Biomass.length", "Biomass.mean", "Biomass.sd", "Biomass.se")]
names(out) <- c("Habitat", "Cruise", "Station", "Longitude", "Latitude", "Depth", "n", "Biomass", "sd", "se")
#out$Longitude <- round(out$Longitude, 4)
#out$Latitude <- round(out$Latitude, 4)
#out$Depth <- round(out$Depth, 0)
#out$Biomass <- round(out$Biomass, 0)
#out$sd <- round(out$sd, 1)
#out$se <- round(out$se, 1)
kable(out, align="c")
splitBy(~Habitat, out) %>% lapply(FUN=function(x)lm(log10(Biomass)~Depth, data=x) %>% summary)
ggplot(data=out,
aes(x=Depth, y=log10(Biomass),
ymin=log10(Biomass-se), ymax=log10(Biomass+se),
shape=Habitat, colour=Habitat, fill=Habitat, linetype=Habitat))+
geom_point(size=5, position = "dodge")+
stat_smooth(data=subset(out, Habitat=="Canyon"), method="lm", formula=y~x, alpha=0.2)+
geom_errorbar(linetype=1, position = "dodge")+
scale_colour_manual(values=c("#e41a1c", "#4daf4a"))+
scale_fill_manual(values=c("black","gray"))+
scale_linetype_manual(values=c(1,2))+
scale_shape_manual(values=c(19,1))+
labs(x="Depth (m)", y=expression(Log[10]~biomass~(mg~m^-2)))+
scale_y_continuous(labels=function(x)paste("  ", x))+
theme_bw() %+replace% large #%+replace% dark
f <- gls(log10(Biomass) ~ Habitat+Depth+Cruise+Habitat:Depth+Habitat:Cruise+Depth:Cruise, data=out, method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# Dianotics plot
dianostic_plot(f, y = "log10(Biomass)")
head(out)
# GC1 and GS1
f <- gls(log10(Biomass) ~ Depth+Cruise+Depth:Cruise, data=subset(out, Station == "GC1"|Station == "GS1"), method = "REML")
# GC1 and GS1
f <- gls(log10(Biomass) ~ Habitat+Cruise+Habitat:Cruise, data=subset(out, Station == "GC1"|Station == "GS1"), method = "REML")
subset(out, Station == "GC1"|Station == "GS1")
# GC1 and GS1
f <- gls(log10(Biomass) ~ Habitat+Cruise+Habitat:Cruise, data=subset(out, Station == "GC1"|Station == "GS1"), method = "REML")
# GC1 and GS1
f <- gls(log10(Biomass) ~ Habitat, data=subset(out, Station == "GC1"|Station == "GS1"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC2 and GS2
f <- gls(log10(Biomass) ~ Habitat, data=subset(out, Station == "GC2"|Station == "GS2"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC3 and GS3
f <- gls(log10(Biomass) ~ Habitat, data=subset(out, Station == "GC3"|Station == "GS3"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC4 and GS4
f <- gls(log10(Biomass) ~ Habitat, data=subset(out, Station == "GC4"|Station == "GS4"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC1 and GS1
f <- gls(log10(Biomass) ~ Habitat+Depth, data=subset(out, Station == "GC1"|Station == "GS1"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC1 and GS1
f <- gls(log10(Biomass) ~ Habitat+Depth+Habitat:Depth, data=subset(out, Station == "GC1"|Station == "GS1"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC1 and GS1
f <- gls(log10(Biomass) ~ Habitat, data=subset(out, Station == "GC1"|Station == "GS1"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC2 and GS2
f <- gls(log10(Biomass) ~ Habitat, data=subset(out, Station == "GC2"|Station == "GS2"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC3 and GS3
f <- gls(log10(Biomass) ~ Habitat, data=subset(out, Station == "GC3"|Station == "GS3"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC4 and GS4
f <- gls(log10(Biomass) ~ Habitat, data=subset(out, Station == "GC4"|Station == "GS4"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC3 and GS3
f <- gls(log10(Biomass) ~ Habitat, data=subset(out, Station == "GC3"|Station == "GS3"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC1 and GS1
f <- gls(log10(Biomass) ~ Habitat, data=subset(out, Station == "GC1"|Station == "GS1"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC2 and GS2
f <- gls(log10(Biomass) ~ Habitat, data=subset(out, Station == "GC2"|Station == "GS2"), method = "REML")
kable(summary(f)$tTable)
knitr::opts_chunk$set(echo = TRUE)
library(bbbs)
library(BenthicPro)
library(ggplot2)
library(plyr)
library(doBy)
library(readxl)
library(knitr)
library(nlme)
large <- theme(legend.title = element_text(size=20),
legend.text = element_text(size=20),
axis.title = element_text(size=20),
axis.text = element_text(size=20))
rotate <- theme(axis.text.x = element_text(size=20, angle=60, hjust=0.5))
# dark theme for ggplot
dark <- theme(plot.background = element_rect(colour = 'NA', fill = 'gray10'),
panel.background = element_rect(colour = 'NA', fill = 'transparent'),
legend.background = element_rect(colour = 'NA', fill = 'transparent'),
legend.title = element_text(colour = 'white', size=20),
legend.text = element_text(colour = 'white', size=20),
axis.title = element_text(colour = 'white', size=20),
axis.text = element_text(colour = 'white', size=20),
axis.ticks = element_line(colour = 'white'),
panel.border = element_rect(fill = 'NA', colour = 'white'),
panel.grid.major = element_line(colour = 'gray30'),
panel.grid.minor = element_line(colour = 'gray20'))
dat <- subset(mac, Cruise=="OR1_1096"|Cruise=="OR1_1102"|Cruise=="OR1_1114"|Cruise=="OR1_1126"|Cruise=="OR1_1128"|Cruise=="OR1_1132")
dat.sum <- summaryBy(Wt~Habitat+Cruise+Station+Deployment+Tube+Taxon, data=dat, FUN=c(sum, length))
names(dat.sum)[-1:-6] <- c("Wt", "Count")
dat.sum$Sample.area <- mac$Area[match(with(dat.sum, paste(Cruise, Station)), with(mac, paste(Cruise, Station)))]
# Convert the numbers of polychaete specimen (with head) to abundance
pols <- subset(mac, Taxon=="Polychaeta" & (Condition=="FH" | Condition=="C" | Condition=="FHT"))
pola <- summaryBy(Wt~Habitat+Cruise+Station+Deployment+Tube+Taxon, data=pols, FUN=length, var.names="Count", keep.names = T)
keep <- match(with(pola, paste(Cruise, Station, Deployment, Tube, Taxon)), with(dat.sum, paste(Cruise, Station, Deployment, Tube, Taxon)))
dat.sum$Count[keep] <- pola$Count
# Convert the numbers of complete ophiroid specimens to abundance
ophs <- subset(mac, Taxon=="Ophiuroidea" & Condition=="C")
opha <- summaryBy(Wt~Habitat+Cruise+Station+Deployment+Tube+Taxon, data=ophs, FUN=length, var.names="Count", keep.names = T)
keep <- match(with(opha, paste(Cruise, Station, Deployment, Tube, Taxon)), with(dat.sum, paste(Cruise, Station, Deployment, Tube, Taxon)))
dat.sum$Count[keep] <- opha$Count
# Remove Cyclopoida and Calanoida
dat.sum <- subset(dat.sum, !(Taxon=="Cyclopoida"|Taxon=="Calanoida"))
# Match to marofauna respiration parameters
dat.sum <- cbind(dat.sum, mpr[match(dat.sum$Taxon, mpr$Taxon), c("ConFac_j2mgwm", "ConFac_j2mgc")])
dat.sum$Bodymass <- with(dat.sum, Wt*ConFac_j2mgwm/Count)
dat.sum <- cbind(dat.sum, env[match(with(dat.sum, paste(Cruise, Station)), with(env, paste(Cruise, Station))), c("Temperature", "Depth")])
dat.sum <- cbind(dat.sum, mpr[match(dat.sum$Taxon, mpr$Taxon), c(-1:-3, -21)])
# Calculate R/M ratio
# Convert bodymass in J to kcal
individualRM <- 8.3732-0.2073*log10(dat.sum$Bodymass)-2766.0235 /(dat.sum$Temperature+273.15)
RMresults<-cbind(dat.sum, daily.RtoM=10^individualRM)
# Daily respiration in mg WM per species and sample per square meter
RMresults$respirationW <- with(RMresults, daily.RtoM*Wt/Sample.area)
# Daily respiration in J per species and sample per square meter
RMresults$respirationJ <- with(RMresults, respirationW*ConFac_j2mgwm)
# Daily respiration in milligram carbon per species and sample per square meter
RMresults$respirationC <- with(RMresults, respirationJ/ConFac_j2mgc)
# Average P/B ratio by tube
p2b <- summaryBy(Depth+daily.RtoM~Habitat+Cruise+Station+Deployment+Tube, data = RMresults, fun = mean, keep.names = TRUE)
# Summation production by tube
pd <- summaryBy(respirationW+respirationJ+respirationC+Count+Wt~Habitat+Cruise+Station+Deployment+Tube, data = RMresults, fun = sum, keep.names = TRUE)
pd <- cbind(p2b, pd[, -1:-5])
se <- function(x) sd(x)/length(x)^0.5
out <- summaryBy(Depth+daily.RtoM+respirationW+respirationJ+respirationC~Habitat+Cruise+Station, data = pd, FUN = c(mean, sd, length, se))
out <- out[, c("Habitat", "Cruise", "Station", "Depth.mean", "daily.RtoM.mean", "daily.RtoM.se", "respirationW.mean", "respirationW.se", "respirationJ.mean", "respirationJ.se", "respirationC.mean", "respirationC.se", "Depth.length")]
names(out) <- c("Habitat", "Cruise", "Station", "Depth", "daily.RtoM", "daily.RtoM.se", "respirationW", "respirationW.se", "respirationJ", "respirationJ.se", "respirationC", "respirationC.se", "n")
kable(out)
splitBy(~Habitat, out) %>% lapply(FUN=function(x)lm(daily.RtoM~Depth, data=x) %>% summary)
ggplot(data=out,
aes(x=Depth, y=daily.RtoM,
ymin=daily.RtoM-daily.RtoM.se, ymax=daily.RtoM+daily.RtoM.se,
shape=Habitat, colour=Habitat, fill=Habitat, linetype=Habitat))+
geom_point(size=5, position="jitter")+
stat_smooth(method="lm", formula=y~x, alpha=0.2)+
geom_errorbar(linetype=1, position="jitter")+
scale_colour_manual(values=c("#e41a1c", "#4daf4a"))+
scale_fill_manual(values=c("#e41a1c", "#4daf4a"))+
scale_linetype_manual(values=c(1,2))+
scale_shape_manual(values=c(19,1))+
labs(x="Depth (m)", y=expression("Mass-specific"~respiration~(day^-1)))+
theme_bw() %+replace% large #%+replace% dark
f <- gls(daily.RtoM ~ Habitat+Depth+Cruise+Habitat:Depth+Habitat:Cruise+Depth:Cruise, data=out, method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# Function to plot dianotics plot
dianostic_plot <-
function(f, y){
# standardized residuals versus fitted values
a1 <- plot(f, resid(., type = "p") ~ fitted(.) | Habitat, abline = 0)
a2 <- plot(f, resid(., type = "p") ~ fitted(.) | Cruise, abline = 0)
a3 <- plot(f, resid(., type = "p") ~ fitted(.), abline = 0)
# box-plots of residuals
b1<-plot(f, Habitat ~ resid(.))
b2 <- plot(f, Cruise ~ resid(.))
# observed versus fitted values
c1<-plot(f, paste(paste(y, "fitted(.)", sep="~"), "Habitat", sep="|") %>% formula, abline = c(0,1))
c2<-plot(f, paste(paste(y, "fitted(.)", sep="~"), "Cruise", sep="|") %>% formula, abline = c(0,1))
c3<-plot(f, paste(y, "fitted(.)", sep="~") %>% formula, abline = c(0,1))
# QQ plot
d1<-qqnorm(f, ~ resid(., type = "p") | Habitat, abline = c(0,1))
d2<-qqnorm(f, ~ resid(., type = "p") | Cruise, abline = c(0,1))
d3<-qqnorm(f, ~ resid(., type = "p"), abline = c(0,1))
print(a1, split=c(1,1,3,4), more=TRUE)
print(a2, split=c(2,1,3,4), more=TRUE)
print(a3, split=c(3,1,3,4), more=TRUE)
print(b1, split=c(1,2,3,4), more=TRUE)
print(b2, split=c(2,2,3,4), more=TRUE)
#
print(c1, split=c(1,3,3,4), more=TRUE)
print(c2, split=c(2,3,3,4), more=TRUE)
print(c3, split=c(3,3,3,4), more=TRUE)
print(d1, split=c(1,4,3,4), more=TRUE)
print(d2, split=c(2,4,3,4), more=TRUE)
print(d3, split=c(3,4,3,4))
}
dianostic_plot(f, y = "daily.RtoM")
splitBy(~Habitat, out) %>% lapply(FUN=function(x)lm(log10(respirationW)~Depth, data=x) %>% summary)
ggplot(data=out,
aes(x=Depth, y=log10(respirationW),
ymin=log10(respirationW-respirationW.se), ymax=log10(respirationW+respirationW.se),
shape=Habitat, colour=Habitat, fill=Habitat, linetype=Habitat))+
geom_point(size=5, position="jitter")+
stat_smooth(data=subset(out, Habitat=="Slope"), method="lm", formula=y~x, alpha=0.2)+
geom_errorbar(linetype=1, position="jitter")+
scale_colour_manual(values=c("#e41a1c", "#4daf4a"))+
scale_fill_manual(values=c("#e41a1c", "#4daf4a"))+
scale_linetype_manual(values=c(1,2))+
scale_shape_manual(values=c(19,1))+
labs(x="Depth (m)", y=expression(Log[10]~respiration~(mg~m^-2~day^-1)))+
theme_bw() %+replace% large #%+replace% dark
f <- gls(log10(respirationW) ~ Habitat+Depth+Cruise+Habitat:Depth+Habitat:Cruise+Depth:Cruise, data=out, method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# Dianotics plot
dianostic_plot(f, y = "log10(respirationW)")
# In canyon
f <- gls(log10(respirationW) ~ Depth+Cruise+Depth:Cruise, data=subset(out, Habitat == "Canyon"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# On slope
f <- gls(log10(respirationW) ~ Depth+Cruise+Depth:Cruise, data=subset(out, Habitat == "Slope"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC1 and GS1
f <- gls(log10(respirationW) ~ Habitat, data=subset(out, Station=="GC1"|Station=="GS1", method = "REML")
# GC1 and GS1
f <- gls(log10(respirationW) ~ Habitat, data=subset(out, Station=="GC1"|Station=="GS1", method = "REML")
kable(anova(f))
# GC1 and GS1
f <- gls(log10(respirationW) ~ Habitat, data=subset(out, Station=="GC1"|Station=="GS1", method = "REML")
# GC1 and GS1
f <- gls(log10(respirationW) ~ Habitat, data=subset(out, Station=="GC1"|Station=="GS1"), method = "REML")
subset(out, Station=="GC1"|Station=="GS1")
f <- gls(log10(respirationW) ~ Habitat, data=subset(out, Station=="GC1"|Station=="GS1"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC2 and GS2
f <- gls(log10(respirationW) ~ Habitat, data=subset(out, Station=="GC2"|Station=="GS2"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC3 and GS3
f <- gls(log10(respirationW) ~ Habitat, data=subset(out, Station=="GC3"|Station=="GS3"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC4 and GS4
f <- gls(log10(respirationW) ~ Habitat, data=subset(out, Station=="GC4"|Station=="GS4"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
# GC1 and GS1
f <- gls(log10(respirationW) ~ Habitat, data=subset(out, Station=="GC1"|Station=="GS1"), method = "REML")
kable(summary(f)$tTable)
kable(anova(f))
